patch-package
--- a/node_modules/react-docgen/dist/resolver/findExportedComponentDefinition.js
+++ b/node_modules/react-docgen/dist/resolver/findExportedComponentDefinition.js
@@ -9,6 +9,8 @@ exports.default = findExportedComponentDefinition;
 
 var _isExportsOrModuleAssignment = _interopRequireDefault(require("../utils/isExportsOrModuleAssignment"));
 
+var _isReactForwardRefCall = _interopRequireDefault(require("../utils/isReactForwardRefCall"));
+
 var _isReactComponentClass = _interopRequireDefault(require("../utils/isReactComponentClass"));
 
 var _isReactCreateClassCall = _interopRequireDefault(require("../utils/isReactCreateClassCall"));
@@ -40,7 +42,7 @@ function ignore() {
 }
 
 function isComponentDefinition(path) {
-  return (0, _isReactCreateClassCall.default)(path) || (0, _isReactComponentClass.default)(path) || (0, _isStatelessComponent.default)(path);
+  return (0, _isReactCreateClassCall.default)(path) || (0, _isReactComponentClass.default)(path) || (0, _isStatelessComponent.default)(path) || (0, _isReactForwardRefCall.default)(path);
 }
 
 function resolveDefinition(definition, types) {
@@ -56,6 +58,8 @@ function resolveDefinition(definition, types) {
     return definition;
   } else if ((0, _isStatelessComponent.default)(definition)) {
     return definition;
+  } else if ((0, _isReactForwardRefCall.default)(definition)) {
+    return definition;
   }
 
   return null;
--- a/node_modules/react-docgen/dist/utils/getMemberExpressionValuePath.js
+++ b/node_modules/react-docgen/dist/utils/getMemberExpressionValuePath.js
@@ -11,6 +11,8 @@ var _getNameOrValue = _interopRequireDefault(require("./getNameOrValue"));
 
 var _expressionTo = require("./expressionTo");
 
+var _isReactForwardRefCall = _interopRequireDefault(require("./isReactForwardRefCall"));
+
 var _recast = _interopRequireDefault(require("recast"));
 
 /*
@@ -42,7 +44,7 @@ function resolveName(path) {
     return path.get('id', 'name').value;
   }
 
-  if (types.FunctionExpression.check(path.node) || types.ArrowFunctionExpression.check(path.node) || types.TaggedTemplateExpression.check(path.node)) {
+  if (types.FunctionExpression.check(path.node) || types.ArrowFunctionExpression.check(path.node) || types.TaggedTemplateExpression.check(path.node) || (0, _isReactForwardRefCall.default)(path)) {
     let currentPath = path;
 
     while (currentPath.parent) {
@@ -56,7 +58,7 @@ function resolveName(path) {
     return;
   }
 
-  throw new TypeError('Attempted to resolveName for an unsupported path. resolveName accepts a ' + 'VariableDeclaration, FunctionDeclaration, or FunctionExpression. Got "' + path.node.type + '".');
+  throw new TypeError('Attempted to resolveName for an unsupported path. resolveName accepts a ' + 'VariableDeclaration, FunctionDeclaration, FunctionExpression, or CallExpression. Got "' + path.node.type + '".');
 }
 
 function getRoot(node) {
--- a/node_modules/react-docgen/dist/utils/getMemberValuePath.js
+++ b/node_modules/react-docgen/dist/utils/getMemberValuePath.js
@@ -38,6 +38,7 @@ const POSTPROCESS_MEMBERS = {
 };
 const LOOKUP_METHOD = {
   [types.ArrowFunctionExpression.name]: _getMemberExpressionValuePath.default,
+  [types.CallExpression.name]: _getMemberExpressionValuePath.default,
   [types.FunctionExpression.name]: _getMemberExpressionValuePath.default,
   [types.FunctionDeclaration.name]: _getMemberExpressionValuePath.default,
   [types.VariableDeclaration.name]: _getMemberExpressionValuePath.default,
@@ -61,7 +62,7 @@ function isSupportedDefinitionType({
    * used to add these definitions.
    */
   types.TaggedTemplateExpression.check(node) || // potential stateless function component
-  types.VariableDeclaration.check(node) || types.ArrowFunctionExpression.check(node) || types.FunctionDeclaration.check(node) || types.FunctionExpression.check(node);
+  types.VariableDeclaration.check(node) || types.ArrowFunctionExpression.check(node) || types.FunctionDeclaration.check(node) || types.FunctionExpression.check(node) || types.CallExpression.check(node);
 }
 /**
  * This is a helper method for handlers to make it easier to work either with
new file mode 100644
--- /dev/null
+++ b/node_modules/react-docgen/dist/utils/isReactForwardRefCall.js
@@ -0,0 +1,52 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = isReactCloneElementCall;
+
+var _isReactModuleName = _interopRequireDefault(require("./isReactModuleName"));
+
+var _match = _interopRequireDefault(require("./match"));
+
+var _recast = _interopRequireDefault(require("recast"));
+
+var _resolveToModule = _interopRequireDefault(require("./resolveToModule"));
+
+/*
+ * Copyright (c) 2015, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * 
+ *
+ */
+const types = _recast.default.types.namedTypes;
+/**
+ * Returns true if the expression is a function call of the form
+ * `React.forwardRef(...)`.
+ */
+
+function isReactCloneElementCall(path) {
+  if (types.ExpressionStatement.check(path.node)) {
+    path = path.get('expression');
+  }
+
+  if (!(0, _match.default)(path.node, {
+    callee: {
+      property: {
+        name: 'forwardRef'
+      }
+    }
+  })) {
+    return false;
+  }
+
+  const module = (0, _resolveToModule.default)(path.get('callee', 'object'));
+  return Boolean(module && (0, _isReactModuleName.default)(module));
+}
\ No newline at end of file
