{
  "hookDescription": "",
  "parametersDescriptions": {
    "defaultValue": "The default value. Use when the component is not controlled.",
    "disabled": "If <code>true</code>, the component is disabled.\nThe prop defaults to the value (<code>false</code>) inherited from the parent FormControl component.",
    "error": "If <code>true</code>, the <code>input</code> will indicate an error by setting the <code>aria-invalid</code> attribute.\nThe prop defaults to the value (<code>false</code>) inherited from the parent FormControl component.",
    "inputId": "The <code>id</code> attribute of the input element.",
    "inputRef": "The ref of the input element.",
    "max": "The maximum value.",
    "min": "The minimum value.",
    "onChange": "Callback fired when the <input> value changes, before clamping is applied. Note that\n<code>event.target.value</code> may contain values that fall outside of <code>min</code> and <code>max</code> or\nare otherwise \"invalid\".",
    "onValueChange": "Callback fired after the value is clamped and changes.\nCalled with <code>undefined</code> when the value is unset.",
    "readOnly": "If <code>true</code>, the <code>input</code> element becomes read-only. The stepper buttons remain active,\nwith the addition that they are now keyboard focusable.",
    "required": "If <code>true</code>, the <code>input</code> element is required.\nThe prop defaults to the value (<code>false</code>) inherited from the parent FormControl component.",
    "shiftMultiplier": "Multiplier applied to <code>step</code> if the shift key is held while incrementing\nor decrementing the value. Defaults to </code>10</code>.",
    "step": "The amount that the value changes on each increment or decrement.",
    "value": "The current value. Use when the component is controlled."
  },
  "returnValueDescriptions": {
    "disabled": "If <code>true</code>, the component will be disabled.",
    "error": "If <code>true</code>, the <code>input</code> will indicate an error by setting the <code>aria-invalid</code> attribute.",
    "focused": "If <code>true</code>, the <code>input</code> will be focused.",
    "formControlContext": "Return value from the <code>useFormControlContext</code> hook.",
    "getDecrementButtonProps": "Resolver for the decrement button slot's props.",
    "getIncrementButtonProps": "Resolver for the increment button slot's props.",
    "getInputProps": "Resolver for the input slot's props.",
    "getRootProps": "Resolver for the root slot's props.",
    "inputValue": "The dirty <code>value</code> of the <code>input</code> element when it is in focus.",
    "isDecrementDisabled": "If <code>true</code>, the decrement button will be disabled.\ne.g. when the <code>value</code> is already at <code>min</code>",
    "isIncrementDisabled": "If <code>true</code>, the increment button will be disabled.\ne.g. when the <code>value</code> is already at <code>max</code>",
    "required": "If <code>true</code>, the <code>input</code> will indicate that it's required.",
    "value": "The clamped <code>value</code> of the <code>input</code> element."
  }
}
