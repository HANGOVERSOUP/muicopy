{
  "componentDescription": "",
  "propDescriptions": {
    "aria-label": "The label of the slider.",
    "aria-labelledby": "The id of the element containing a label for the slider.",
    "aria-valuetext": "A string value that provides a user-friendly name for the current value of the slider.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node. Either a string to use a HTML element or a component.",
    "components": "The components used for each slot inside the Slider. Either a string to use a HTML element or a component.",
    "componentsProps": "The props used for each slot inside the Slider.",
    "defaultValue": "The default value. Use when the component is not controlled.",
    "disabled": "If <code>true</code>, the component is disabled.",
    "getAriaLabel": "Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.<br><br><strong>Signature:</strong><br><code>function(index: number) =&gt; string</code><br><em>index:</em> The thumb label&#39;s index to format.",
    "getAriaValueText": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.<br><br><strong>Signature:</strong><br><code>function(value: number, index: number) =&gt; string</code><br><em>value:</em> The thumb label&#39;s value to format.<br><em>index:</em> The thumb label&#39;s index to format.",
    "isRtl": "Indicates whether the theme context has rtl direction. It is set automatically.",
    "marks": "Marks indicate predetermined values to which the user can move the slider. If <code>true</code> the marks are spaced according the value of the <code>step</code> prop. If an array, it should contain objects with <code>value</code> and an optional <code>label</code> keys.",
    "max": "The maximum allowed value of the slider. Should not be equal to min.",
    "min": "The minimum allowed value of the slider. Should not be equal to max.",
    "name": "Name attribute of the hidden <code>input</code> element.",
    "onChange": "Callback function that is fired when the slider&#39;s value changed.<br><br><strong>Signature:</strong><br><code>function(event: object, value: number \\| number[]) =&gt; void</code><br><em>event:</em> The event source of the callback. <strong>Warning</strong>: This is a generic event not a change event.<br><em>value:</em> The new value.",
    "onChangeCommitted": "Callback function that is fired when the <code>mouseup</code> is triggered.<br><br><strong>Signature:</strong><br><code>function(event: object, value: number \\| number[]) =&gt; void</code><br><em>event:</em> The event source of the callback. <strong>Warning</strong>: This is a generic event not a change event.<br><em>value:</em> The new value.",
    "orientation": "The component orientation.",
    "scale": "A transformation function, to change the scale of the slider.",
    "step": "The granularity with which the slider can step through values. (A &quot;discrete&quot; slider.) The <code>min</code> prop serves as the origin for the valid values. We recommend (max - min) to be evenly divisible by the step.<br>When step is <code>null</code>, the thumb can only be slid onto marks provided with the <code>marks</code> prop.",
    "track": "The track presentation:<br>- <code>normal</code> the track will render a bar representing the slider value. - <code>inverted</code> the track will render a bar representing the remaining slider value. - <code>false</code> the track will render without a bar.",
    "value": "The value of the slider. For ranged sliders, provide an array with two values.",
    "valueLabelDisplay": "Controls when the value label is displayed:<br>- <code>auto</code> the value label will display when the thumb is hovered or focused. - <code>on</code> will display persistently. - <code>off</code> will never display.",
    "valueLabelFormat": "The format function the value label&#39;s value.<br>When a function is provided, it should have the following signature:<br>- {number} value The value label&#39;s value to format - {number} index The value label&#39;s index to format"
  },
  "classDescriptions": {
    "root": { "description": "{{stylesApplied}}", "nodeName": "root element" },
    "marked": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "root element",
      "conditions": "<code>marks</code> is provided with at least one label"
    },
    "vertical": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "root element",
      "conditions": "<code>orientation=\"vertical\"</code>"
    },
    "disabled": {
      "description": "{{pseudoClassApplied}} if {{conditions}}.",
      "nodeName": "root and thumb element",
      "conditions": "<code>disabled={true}</code>"
    },
    "rail": { "description": "{{stylesApplied}}", "nodeName": "rail element" },
    "track": { "description": "{{stylesApplied}}", "nodeName": "track element" },
    "trackFalse": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "track element",
      "conditions": "<code>track={false}</code>"
    },
    "trackInverted": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "track element",
      "conditions": "<code>track=\"inverted\"</code>"
    },
    "thumb": { "description": "{{stylesApplied}}", "nodeName": "thumb element" },
    "active": {
      "description": "{{pseudoClassApplied}} if {{conditions}}.",
      "nodeName": "thumb element",
      "conditions": "it's active"
    },
    "focusVisible": {
      "description": "{{pseudoClassApplied}} if {{conditions}}.",
      "nodeName": "thumb element",
      "conditions": "keyboard focused"
    },
    "valueLabel": { "description": "{{stylesApplied}}", "nodeName": "thumb label element" },
    "mark": { "description": "{{stylesApplied}}", "nodeName": "mark element" },
    "markActive": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "mark element",
      "conditions": "active (depending on the value)"
    },
    "markLabel": { "description": "{{stylesApplied}}", "nodeName": "mark label element" },
    "markLabelActive": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "mark label element",
      "conditions": "active (depending on the value)"
    }
  }
}
