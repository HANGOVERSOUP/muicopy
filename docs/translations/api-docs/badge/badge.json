{
  "componentDescription": "",
  "propDescriptions": {
    "anchorOrigin": "The anchor of the badge.",
    "badgeContent": "The content rendered within the badge.",
    "children": "The badge will be added relative to this node.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "components": "The components used for each slot inside the Badge. Either a string to use a HTML element or a component.",
    "componentsProps": "The props used for each slot inside the Badge.",
    "invisible": "If <code>true</code>, the badge is invisible.",
    "max": "Max count to show.",
    "overlap": "Wrapped shape the badge should overlap.",
    "showZero": "Controls whether the badge is hidden when <code>badgeContent</code> is zero.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/basics/#the-sx-prop\">`sx` page</a> for more details.",
    "variant": "The variant to use.",
    "component": "The component used for the root node. Either a string to use a HTML element or a component."
  },
  "classDescriptions": {
    "root": { "description": "{{stylesApplied}}", "nodeName": "root element" },
    "badge": { "description": "{{stylesApplied}}", "nodeName": "badge `span` element" },
    "dot": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "badge `span` element",
      "conditions": "<code>variant=\"dot\"</code>"
    },
    "standard": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "badge `span` element",
      "conditions": "<code>variant=\"standard\"</code>"
    },
    "anchorOriginTopRightRectangular": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "badge `span` element",
      "conditions": "<code>anchorOrigin={{ 'top', 'right' }} overlap=\"rectangular\"</code>"
    },
    "anchorOriginBottomRightRectangular": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "badge `span` element",
      "conditions": "<code>anchorOrigin={{ 'bottom', 'right' }} overlap=\"rectangular\"</code>"
    },
    "anchorOriginTopLeftRectangular": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "badge `span` element",
      "conditions": "<code>anchorOrigin={{ 'top', 'left' }} overlap=\"rectangular\"</code>"
    },
    "anchorOriginBottomLeftRectangular": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "badge `span` element",
      "conditions": "<code>anchorOrigin={{ 'bottom', 'left' }} overlap=\"rectangular\"</code>"
    },
    "anchorOriginTopRightCircular": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "badge `span` element",
      "conditions": "<code>anchorOrigin={{ 'top', 'right' }} overlap=\"circular\"</code>"
    },
    "anchorOriginBottomRightCircular": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "badge `span` element",
      "conditions": "<code>anchorOrigin={{ 'bottom', 'right' }} overlap=\"circular\"</code>"
    },
    "anchorOriginTopLeftCircular": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "badge `span` element",
      "conditions": "<code>anchorOrigin={{ 'top', 'left' }} overlap=\"circular\"</code>"
    },
    "anchorOriginBottomLeftCircular": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "badge `span` element",
      "conditions": "<code>anchorOrigin={{ 'bottom', 'left' }} overlap=\"circular\"</code>"
    },
    "invisible": {
      "description": "{{pseudoClassApplied}} if {{conditions}}.",
      "nodeName": "badge `span` element",
      "conditions": "<code>invisible={true}</code>"
    },
    "colorPrimary": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "badge `span` element",
      "conditions": "<code>color=\"primary\"</code>"
    },
    "colorSecondary": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "badge `span` element",
      "conditions": "<code>color=\"secondary\"</code>"
    },
    "colorError": {
      "description": "{{stylesApplied}} if {{conditions}}.",
      "nodeName": "badge `span` element",
      "conditions": "<code>color=\"error\"</code>"
    }
  }
}
