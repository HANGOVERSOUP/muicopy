{
  "Accordion": {
    "root": "Styles applied to the root element.",
    "rounded": "Styles applied to the root element unless {{conditions}}.",
    "expanded": "Pseudo-class applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "region": "Styles applied to the region element, the container of the children."
  },
  "AccordionActions": {
    "root": "Styles applied to the root element.",
    "spacing": "Styles applied to the root element unless {{conditions}}."
  },
  "AccordionDetails": { "root": "Styles applied to the root element." },
  "AccordionSummary": {
    "root": "Styles applied to the root element.",
    "expanded": "Pseudo-class applied to the root element, children wrapper element and `IconButton` component if {{conditions}}.",
    "focusVisible": "Pseudo-class applied to the ButtonBase root element if the button is keyboard focused.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "content": "Styles applied to the children wrapper element.",
    "expandIconWrapper": "Styles applied to the `expandIcon`'s wrapper element."
  },
  "Alert": {
    "root": "Styles applied to the root element.",
    "filled": "Styles applied to the root element if {{conditions}}.",
    "outlined": "Styles applied to the root element if {{conditions}}.",
    "standard": "Styles applied to the root element if {{conditions}}.",
    "standardSuccess": "Styles applied to the root element if {{conditions}}.",
    "standardInfo": "Styles applied to the root element if {{conditions}}.",
    "standardWarning": "Styles applied to the root element if {{conditions}}.",
    "standardError": "Styles applied to the root element if {{conditions}}.",
    "outlinedSuccess": "Styles applied to the root element if {{conditions}}.",
    "outlinedInfo": "Styles applied to the root element if {{conditions}}.",
    "outlinedWarning": "Styles applied to the root element if {{conditions}}.",
    "outlinedError": "Styles applied to the root element if {{conditions}}.",
    "filledSuccess": "Styles applied to the root element if {{conditions}}.",
    "filledInfo": "Styles applied to the root element if {{conditions}}.",
    "filledWarning": "Styles applied to the root element if {{conditions}}.",
    "filledError": "Styles applied to the root element if {{conditions}}.",
    "icon": "Styles applied to the icon wrapper element.",
    "message": "Styles applied to the message wrapper element.",
    "action": "Styles applied to the action wrapper element if {{conditions}}."
  },
  "AlertTitle": { "root": "Styles applied to the root element." },
  "AppBar": {
    "root": "Styles applied to the root element.",
    "positionFixed": "Styles applied to the root element if {{conditions}}.",
    "positionAbsolute": "Styles applied to the root element if {{conditions}}.",
    "positionSticky": "Styles applied to the root element if {{conditions}}.",
    "positionStatic": "Styles applied to the root element if {{conditions}}.",
    "positionRelative": "Styles applied to the root element if {{conditions}}.",
    "colorDefault": "Styles applied to the root element if {{conditions}}.",
    "colorPrimary": "Styles applied to the root element if {{conditions}}.",
    "colorSecondary": "Styles applied to the root element if {{conditions}}.",
    "colorInherit": "Styles applied to the root element if {{conditions}}.",
    "colorTransparent": "Styles applied to the root element if {{conditions}}."
  },
  "Autocomplete": {
    "root": "Styles applied to the root element.",
    "": "Avoid double tap issue on iOS",
    "fullWidth": "Styles applied to the root element if {{conditions}}.",
    "focused": "Pseudo-class applied to the root element if focused.",
    "tag": "Styles applied to the tag elements, e.g. the chips.",
    "tagSizeSmall": "Styles applied to the tag elements, e.g. the chips if {{conditions}}.",
    "hasPopupIcon": "Styles applied when the popup icon is rendered.",
    "hasClearIcon": "Styles applied when the clear icon is rendered.",
    "inputRoot": "Styles applied to the Input element.",
    "input": "Styles applied to the input element.",
    "inputFocused": "Styles applied to the input element if tag focused.",
    "endAdornment": "Styles applied to the endAdornment element.",
    "clearIndicator": "Styles applied to the clear indicator.",
    "clearIndicatorDirty": "Styles applied to the clear indicator if the input is dirty.",
    "popupIndicator": "Styles applied to the popup indicator.",
    "popupIndicatorOpen": "Styles applied to the popup indicator if the popup is open.",
    "popper": "Styles applied to the popper element.",
    "popperDisablePortal": "Styles applied to the popper element if {{conditions}}.",
    "paper": "Styles applied to the `Paper` component.",
    "listbox": "Styles applied to the `listbox` component.",
    "loading": "Styles applied to the loading wrapper.",
    "noOptions": "Styles applied to the no option wrapper.",
    "option": "Styles applied to the option elements.",
    "groupLabel": "Styles applied to the group's label elements.",
    "groupUl": "Styles applied to the group's ul elements.",
    "const": "eslint-enable @typescript-eslint/no-unused-vars"
  },
  "Avatar": {
    "root": "Styles applied to the root element.",
    "colorDefault": "Styles applied to the root element if not `src` or `srcSet`.",
    "circular": "Styles applied to the root element if {{conditions}}.",
    "rounded": "Styles applied to the root element if {{conditions}}.",
    "square": "Styles applied to the root element if {{conditions}}.",
    "img": "Styles applied to the img element if either `src` or `srcSet` is defined.",
    "fallback": "Styles applied to the fallback icon"
  },
  "AvatarGroup": {
    "root": "Styles applied to the root element.",
    "avatar": "Styles applied to the avatar elements."
  },
  "Backdrop": {
    "root": "Styles applied to the root element.",
    "invisible": "Styles applied to the root element if {{conditions}}."
  },
  "Badge": {
    "root": "Styles applied to the root element.",
    "badge": "Styles applied to the badge `span` element.",
    "colorPrimary": "Styles applied to the root element if {{conditions}}.",
    "colorSecondary": "Styles applied to the root element if {{conditions}}.",
    "colorError": "Styles applied to the root element if {{conditions}}.",
    "dot": "Styles applied to the root element if {{conditions}}.",
    "standard": "Styles applied to the root element if {{conditions}}.",
    "anchorOriginTopRightRectangular": "Styles applied to the root element if {{conditions}}.",
    "anchorOriginBottomRightRectangular": "Styles applied to the root element if {{conditions}}.",
    "anchorOriginTopLeftRectangular": "Styles applied to the root element if {{conditions}}.",
    "anchorOriginBottomLeftRectangular": "Styles applied to the root element if {{conditions}}.",
    "anchorOriginTopRightCircular": "Styles applied to the root element if {{conditions}}.",
    "anchorOriginBottomRightCircular": "Styles applied to the root element if {{conditions}}.",
    "anchorOriginTopLeftCircular": "Styles applied to the root element if {{conditions}}.",
    "anchorOriginBottomLeftCircular": "Styles applied to the root element if {{conditions}}.",
    "invisible": "Pseudo-class to the badge `span` element if {{conditions}}."
  },
  "BottomNavigation": { "root": "Styles applied to the root element." },
  "BottomNavigationAction": {
    "root": "Styles applied to the root element.",
    "selected": "Pseudo-class applied to the root element if selected.",
    "iconOnly": "Pseudo-class applied to the root element if {{conditions}}.",
    "wrapper": "Styles applied to the span element that wraps the icon and label.",
    "label": "Styles applied to the label's span element."
  },
  "Breadcrumbs": {
    "root": "Styles applied to the root element.",
    "ol": "Styles applied to the ol element.",
    "li": "Styles applied to the li element.",
    "separator": "Styles applied to the separator element."
  },
  "Button": {
    "root": "Styles applied to the root element.",
    "label": "Styles applied to the span element that wraps the children.",
    "text": "Styles applied to the root element if {{conditions}}.",
    "textPrimary": "Styles applied to the root element if {{conditions}}.",
    "textSecondary": "Styles applied to the root element if {{conditions}}.",
    "outlined": "Styles applied to the root element if {{conditions}}.",
    "outlinedPrimary": "Styles applied to the root element if {{conditions}}.",
    "outlinedSecondary": "Styles applied to the root element if {{conditions}}.",
    "contained": "Styles applied to the root element if {{conditions}}.",
    "containedPrimary": "Styles applied to the root element if {{conditions}}.",
    "containedSecondary": "Styles applied to the root element if {{conditions}}.",
    "disableElevation": "Styles applied to the root element if {{conditions}}.",
    "focusVisible": "Pseudo-class applied to the ButtonBase root element if the button is keyboard focused.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "colorInherit": "Styles applied to the root element if {{conditions}}.",
    "textSizeSmall": "Styles applied to the root element if {{conditions}}.",
    "textSizeLarge": "Styles applied to the root element if {{conditions}}.",
    "outlinedSizeSmall": "Styles applied to the root element if {{conditions}}.",
    "outlinedSizeLarge": "Styles applied to the root element if {{conditions}}.",
    "containedSizeSmall": "Styles applied to the root element if {{conditions}}.",
    "containedSizeLarge": "Styles applied to the root element if {{conditions}}.",
    "sizeSmall": "Styles applied to the root element if {{conditions}}.",
    "sizeLarge": "Styles applied to the root element if {{conditions}}.",
    "fullWidth": "Styles applied to the root element if {{conditions}}.",
    "startIcon": "Styles applied to the startIcon element if supplied.",
    "endIcon": "Styles applied to the endIcon element if supplied.",
    "iconSizeSmall": "Styles applied to the icon element if supplied and `size=\"small\"`.",
    "iconSizeMedium": "Styles applied to the icon element if supplied and `size=\"medium\"`.",
    "iconSizeLarge": "Styles applied to the icon element if supplied and `size=\"large\"`."
  },
  "ButtonBase": {
    "root": "Styles applied to the root element.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "focusVisible": "Pseudo-class applied to the root element if keyboard focused.",
    "": "TouchRipple is only needed client-side, x2 boost on the server."
  },
  "ButtonGroup": {
    "root": "Styles applied to the root element.",
    "contained": "Styles applied to the root element if {{conditions}}.",
    "outlined": "Styles applied to the root element if {{conditions}}.",
    "text": "Styles applied to the root element if {{conditions}}.",
    "disableElevation": "Styles applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to child elements if {{conditions}}.",
    "fullWidth": "Styles applied to the root element if {{conditions}}.",
    "vertical": "Styles applied to the root element if {{conditions}}.",
    "grouped": "Styles applied to the children.",
    "groupedHorizontal": "Styles applied to the children if {{conditions}}.",
    "groupedVertical": "Styles applied to the children if {{conditions}}.",
    "groupedText": "Styles applied to the children if {{conditions}}.",
    "groupedTextHorizontal": "Styles applied to the children if {{conditions}}.",
    "groupedTextVertical": "Styles applied to the children if {{conditions}}.",
    "groupedTextPrimary": "Styles applied to the children if {{conditions}}.",
    "groupedTextSecondary": "Styles applied to the children if {{conditions}}.",
    "groupedOutlined": "Styles applied to the children if {{conditions}}.",
    "groupedOutlinedHorizontal": "Styles applied to the children if {{conditions}}.",
    "groupedOutlinedVertical": "Styles applied to the children if {{conditions}}.",
    "groupedOutlinedPrimary": "Styles applied to the children if {{conditions}}.",
    "groupedOutlinedSecondary": "Styles applied to the children if {{conditions}}.",
    "groupedContained": "Styles applied to the children if {{conditions}}.",
    "groupedContainedHorizontal": "Styles applied to the children if {{conditions}}.",
    "groupedContainedVertical": "Styles applied to the children if {{conditions}}.",
    "groupedContainedPrimary": "Styles applied to the children if {{conditions}}.",
    "groupedContainedSecondary": "Styles applied to the children if {{conditions}}."
  },
  "Card": { "root": "Styles applied to the root element." },
  "CardActionArea": {
    "root": "Styles applied to the root element.",
    "focusVisible": "Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused.",
    "focusHighlight": "Styles applied to the overlay that covers the action area when it is keyboard focused."
  },
  "CardActions": {
    "root": "Styles applied to the root element.",
    "spacing": "Styles applied to the root element unless {{conditions}}."
  },
  "CardContent": { "root": "Styles applied to the root element." },
  "CardHeader": {
    "root": "Styles applied to the root element.",
    "avatar": "Styles applied to the avatar element.",
    "action": "Styles applied to the action element.",
    "content": "Styles applied to the content wrapper element.",
    "title": "Styles applied to the title Typography element.",
    "subheader": "Styles applied to the subheader Typography element."
  },
  "CardMedia": {
    "root": "Styles applied to the root element.",
    "media": "Styles applied to the root element if {{conditions}}.",
    "img": "Styles applied to the root element if {{conditions}}."
  },
  "Checkbox": {
    "root": "Styles applied to the root element.",
    "checked": "Pseudo-class applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "indeterminate": "Pseudo-class applied to the root element if {{conditions}}.",
    "colorPrimary": "Styles applied to the root element if {{conditions}}.",
    "colorSecondary": "Styles applied to the root element if {{conditions}}."
  },
  "Chip": {
    "root": "Styles applied to the root element.",
    "sizeSmall": "Styles applied to the root element if {{conditions}}.",
    "colorPrimary": "Styles applied to the root element if {{conditions}}.",
    "colorSecondary": "Styles applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "clickable": "Styles applied to the root element if {{conditions}}.",
    "clickableColorPrimary": "Styles applied to the root element if {{conditions}}.",
    "clickableColorSecondary": "Styles applied to the root element if {{conditions}}.",
    "deletable": "Styles applied to the root element if {{conditions}}.",
    "deletableColorPrimary": "Styles applied to the root element if {{conditions}}.",
    "deletableColorSecondary": "Styles applied to the root element if {{conditions}}.",
    "outlined": "Styles applied to the root element if {{conditions}}.",
    "filled": "Styles applied to the root element if {{conditions}}.",
    "outlinedPrimary": "Styles applied to the root element if {{conditions}}.",
    "outlinedSecondary": "Styles applied to the root element if {{conditions}}.",
    "avatar": "Styles applied to the `avatar` element.",
    "avatarSmall": "Styles applied to the `avatar` element if {{conditions}}.",
    "avatarColorPrimary": "Styles applied to the `avatar` element if {{conditions}}.",
    "avatarColorSecondary": "Styles applied to the `avatar` element if {{conditions}}.",
    "icon": "Styles applied to the `icon` element.",
    "iconSmall": "Styles applied to the `icon` element if {{conditions}}.",
    "iconColorPrimary": "Styles applied to the `icon` element if {{conditions}}.",
    "iconColorSecondary": "Styles applied to the `icon` element if {{conditions}}.",
    "label": "Styles applied to the label `span` element.",
    "labelSmall": "Styles applied to the label `span` element if {{conditions}}.",
    "deleteIcon": "Styles applied to the `deleteIcon` element.",
    "deleteIconSmall": "Styles applied to the `deleteIcon` element if {{conditions}}.",
    "deleteIconColorPrimary": "Styles applied to the deleteIcon element if {{conditions}}.",
    "deleteIconColorSecondary": "Styles applied to the deleteIcon element if {{conditions}}.",
    "deleteIconOutlinedColorPrimary": "Styles applied to the deleteIcon element if {{conditions}}.",
    "deleteIconOutlinedColorSecondary": "Styles applied to the deleteIcon element if {{conditions}}.",
    "focusVisible": "Pseudo-class applied to the root element if keyboard focused."
  },
  "CircularProgress": {
    "root": "Styles applied to the root element.",
    "determinate": "Styles applied to the root element if {{conditions}}.",
    "indeterminate": "Styles applied to the root element if {{conditions}}.",
    "colorPrimary": "Styles applied to the root element if {{conditions}}.",
    "colorSecondary": "Styles applied to the root element if {{conditions}}.",
    "svg": "Styles applied to the `svg` element.",
    "circle": "Styles applied to the `circle` svg path.",
    "circleDeterminate": "Styles applied to the `circle` svg path if {{conditions}}.",
    "circleIndeterminate": "Styles applied to the `circle` svg path if {{conditions}}.",
    "circleDisableShrink": "Styles applied to the `circle` svg path if {{conditions}}."
  },
  "ClickAwayListener": {},
  "Collapse": {
    "root": "Styles applied to the root element.",
    "horizontal": "Pseudo-class applied to the root element if {{conditions}}.",
    "entered": "Styles applied to the root element when the transition has entered.",
    "hidden": "Styles applied to the root element when the transition has exited and `collapsedSize` != 0px.",
    "wrapper": "Styles applied to the outer wrapper element.",
    "wrapperInner": "Styles applied to the inner wrapper element."
  },
  "Container": {
    "root": "Styles applied to the root element.",
    "disableGutters": "Styles applied to the root element if {{conditions}}.",
    "fixed": "Styles applied to the root element if {{conditions}}.",
    "maxWidthXs": "Styles applied to the root element if {{conditions}}.",
    "maxWidthSm": "Styles applied to the root element if {{conditions}}.",
    "maxWidthMd": "Styles applied to the root element if {{conditions}}.",
    "maxWidthLg": "Styles applied to the root element if {{conditions}}.",
    "maxWidthXl": "Styles applied to the root element if {{conditions}}."
  },
  "CssBaseline": {},
  "Dialog": {
    "root": "Styles applied to the root element.",
    "scrollPaper": "Styles applied to the container element if {{conditions}}.",
    "scrollBody": "Styles applied to the container element if {{conditions}}.",
    "container": "Styles applied to the container element.",
    "paper": "Styles applied to the `Paper` component.",
    "paperScrollPaper": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperScrollBody": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperWidthFalse": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperWidthXs": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperWidthSm": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperWidthMd": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperWidthLg": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperWidthXl": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperFullWidth": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperFullScreen": "Styles applied to the `Paper` component if {{conditions}}."
  },
  "DialogActions": {
    "root": "Styles applied to the root element.",
    "spacing": "Styles applied to the root element unless {{conditions}}."
  },
  "DialogContent": {
    "root": "Styles applied to the root element.",
    "dividers": "Styles applied to the root element if {{conditions}}."
  },
  "DialogContentText": { "root": "Styles applied to the root element." },
  "DialogTitle": { "root": "Styles applied to the root element." },
  "Divider": {
    "root": "Styles applied to the root element.",
    "absolute": "Styles applied to the root element if {{conditions}}.",
    "inset": "Styles applied to the root element if {{conditions}}.",
    "fullWidth": "Styles applied to the root element if {{conditions}}.",
    "light": "Styles applied to the root element if {{conditions}}.",
    "middle": "Styles applied to the root element if {{conditions}}.",
    "vertical": "Styles applied to the root element if {{conditions}}.",
    "flexItem": "Styles applied to the root element if {{conditions}}.",
    "withChildren": "Styles applied to the root element if divider have text.",
    "withChildrenVertical": "Styles applied to the root element if divider have text and `orientation=\"vertical\"`.",
    "textAlignRight": "Styles applied to the root element if {{conditions}}.",
    "textAlignLeft": "Styles applied to the root element if {{conditions}}.",
    "wrapper": "Styles applied to the span children element if {{conditions}}.",
    "wrapperVertical": "Styles applied to the span children element if {{conditions}}."
  },
  "Drawer": {
    "root": "Styles applied to the root element.",
    "docked": "Styles applied to the root element if {{conditions}}.",
    "paper": "Styles applied to the `Paper` component.",
    "paperAnchorLeft": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperAnchorRight": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperAnchorTop": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperAnchorBottom": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperAnchorDockedLeft": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperAnchorDockedTop": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperAnchorDockedRight": "Styles applied to the `Paper` component if {{conditions}}.",
    "paperAnchorDockedBottom": "Styles applied to the `Paper` component if {{conditions}}.",
    "modal": "Styles applied to the `Modal` component."
  },
  "Fab": {
    "root": "Styles applied to the root element.",
    "label": "Styles applied to the span element that wraps the children.",
    "primary": "Styles applied to the root element if {{conditions}}.",
    "secondary": "Styles applied to the root element if {{conditions}}.",
    "extended": "Styles applied to the root element if {{conditions}}.",
    "circular": "Styles applied to the root element if {{conditions}}.",
    "focusVisible": "Pseudo-class applied to the ButtonBase root element if the button is keyboard focused.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "colorInherit": "Styles applied to the root element if {{conditions}}.",
    "sizeSmall": "Styles applied to the root element if {{conditions}}.",
    "sizeMedium": "Styles applied to the root element if {{conditions}}."
  },
  "Fade": {},
  "FilledInput": {
    "root": "Styles applied to the root element.",
    "colorSecondary": "Styles applied to the root element if color secondary.",
    "underline": "Styles applied to the root element unless {{conditions}}.",
    "focused": "Pseudo-class applied to the root element if the component is focused.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "adornedStart": "Styles applied to the root element if {{conditions}}.",
    "adornedEnd": "Styles applied to the root element if {{conditions}}.",
    "error": "Pseudo-class applied to the root element if {{conditions}}.",
    "marginDense": "Styles applied to the `input` element if {{conditions}}.",
    "multiline": "Styles applied to the root element if {{conditions}}.",
    "hiddenLabel": "Styles applied to the root element if {{conditions}}.",
    "input": "Styles applied to the `input` element.",
    "inputMarginDense": "Styles applied to the `input` element if {{conditions}}.",
    "inputHiddenLabel": "Styles applied to the `input` if in `<FormControl hiddenLabel />`.",
    "inputMultiline": "Styles applied to the `input` element if {{conditions}}.",
    "inputAdornedStart": "Styles applied to the `input` element if {{conditions}}.",
    "inputAdornedEnd": "Styles applied to the `input` element if {{conditions}}."
  },
  "FormControl": {
    "root": "Styles applied to the root element.",
    "marginNormal": "Styles applied to the root element if {{conditions}}.",
    "marginDense": "Styles applied to the root element if {{conditions}}.",
    "fullWidth": "Styles applied to the root element if {{conditions}}."
  },
  "FormControlLabel": {
    "root": "Styles applied to the root element.",
    "labelPlacementStart": "Styles applied to the root element if {{conditions}}.",
    "labelPlacementTop": "Styles applied to the root element if {{conditions}}.",
    "labelPlacementBottom": "Styles applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "label": "Styles applied to the label's Typography component."
  },
  "FormGroup": {
    "root": "Styles applied to the root element.",
    "row": "Styles applied to the root element if {{conditions}}."
  },
  "FormHelperText": {
    "root": "Styles applied to the root element.",
    "error": "Pseudo-class applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "marginDense": "Styles applied to the root element if {{conditions}}.",
    "contained": "Styles applied to the root element if {{conditions}}.",
    "focused": "Pseudo-class applied to the root element if {{conditions}}.",
    "filled": "Pseudo-class applied to the root element if {{conditions}}.",
    "required": "Pseudo-class applied to the root element if {{conditions}}."
  },
  "FormLabel": {
    "root": "Styles applied to the root element.",
    "colorSecondary": "Styles applied to the root element if the color is secondary.",
    "focused": "Pseudo-class applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "error": "Pseudo-class applied to the root element if {{conditions}}.",
    "filled": "Pseudo-class applied to the root element if {{conditions}}.",
    "required": "Pseudo-class applied to the root element if {{conditions}}.",
    "asterisk": "Styles applied to the asterisk element."
  },
  "Grid": {
    "root": "Styles applied to the root element.",
    "container": "Styles applied to the root element if {{conditions}}.",
    "item": "Styles applied to the root element if {{conditions}}.",
    "zeroMinWidth": "Styles applied to the root element if {{conditions}}.",
    "": "Styles applied to the root element if `justifyContent=\"space-evenly\"`."
  },
  "Grow": {},
  "Hidden": {},
  "Icon": {
    "root": "Styles applied to the root element.",
    "colorPrimary": "Styles applied to the root element if {{conditions}}.",
    "colorSecondary": "Styles applied to the root element if {{conditions}}.",
    "colorAction": "Styles applied to the root element if {{conditions}}.",
    "colorError": "Styles applied to the root element if {{conditions}}.",
    "colorDisabled": "Styles applied to the root element if {{conditions}}.",
    "fontSizeInherit": "Styles applied to the root element if {{conditions}}.",
    "fontSizeSmall": "Styles applied to the root element if {{conditions}}.",
    "fontSizeLarge": "Styles applied to the root element if {{conditions}}."
  },
  "IconButton": {
    "root": "Styles applied to the root element.",
    "edgeStart": "Styles applied to the root element if {{conditions}}.",
    "edgeEnd": "Styles applied to the root element if {{conditions}}.",
    "colorInherit": "Styles applied to the root element if {{conditions}}.",
    "colorPrimary": "Styles applied to the root element if {{conditions}}.",
    "colorSecondary": "Styles applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "sizeSmall": "Styles applied to the root element if {{conditions}}.",
    "label": "Styles applied to the children container element."
  },
  "ImageList": {
    "root": "Styles applied to the root element.",
    "masonry": "Styles applied to the root element if {{conditions}}.",
    "quilted": "Styles applied to the root element if {{conditions}}.",
    "standard": "Styles applied to the root element if {{conditions}}.",
    "woven": "Styles applied to the root element if {{conditions}}."
  },
  "ImageListItem": {
    "root": "Styles applied to the root element.",
    "img": "Styles applied to an `img` element to ensure it covers the item.",
    "standard": "Styles applied to the root element if {{conditions}}.",
    "woven": "Styles applied to the root element if {{conditions}}."
  },
  "ImageListItemBar": {
    "root": "Styles applied to the root element.",
    "positionBottom": "Styles applied to the root element if {{conditions}}.",
    "positionTop": "Styles applied to the root element if {{conditions}}.",
    "positionBelow": "Styles applied to the root element if {{conditions}}.",
    "titleWrap": "Styles applied to the title and subtitle container element.",
    "titleWrapBelow": "Styles applied to the title and subtitle container element if {{conditions}}.",
    "titleWrapActionPosLeft": "Styles applied to the container element if {{conditions}}.",
    "titleWrapActionPosRight": "Styles applied to the container element if {{conditions}}.",
    "title": "Styles applied to the title container element.",
    "subtitle": "Styles applied to the subtitle container element.",
    "actionIcon": "Styles applied to the actionIcon if supplied.",
    "actionIconActionPosLeft": "Styles applied to the actionIcon if {{conditions}}."
  },
  "Input": {
    "root": "Styles applied to the root element.",
    "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
    "focused": "Styles applied to the root element if the component is focused.",
    "disabled": "Styles applied to the root element if {{conditions}}.",
    "colorSecondary": "Styles applied to the root element if color secondary.",
    "underline": "Styles applied to the root element unless {{conditions}}.",
    "error": "Pseudo-class applied to the root element if {{conditions}}.",
    "marginDense": "Styles applied to the `input` element if {{conditions}}.",
    "multiline": "Styles applied to the root element if {{conditions}}.",
    "fullWidth": "Styles applied to the root element if {{conditions}}.",
    "input": "Styles applied to the `input` element.",
    "inputMarginDense": "Styles applied to the `input` element if {{conditions}}.",
    "inputMultiline": "Styles applied to the `input` element if {{conditions}}.",
    "inputTypeSearch": "Styles applied to the `input` element if {{conditions}}."
  },
  "InputAdornment": {
    "root": "Styles applied to the root element.",
    "filled": "Styles applied to the root element if {{conditions}}.",
    "positionStart": "Styles applied to the root element if {{conditions}}.",
    "positionEnd": "Styles applied to the root element if {{conditions}}.",
    "disablePointerEvents": "Styles applied to the root element if {{conditions}}.",
    "hiddenLabel": "Styles applied if the adornment is used inside <FormControl hiddenLabel />.",
    "marginDense": "Styles applied if the adornment is used inside <FormControl margin=\"dense\" />."
  },
  "InputBase": {
    "root": "Styles applied to the root element.",
    "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
    "focused": "Styles applied to the root element if the component is focused.",
    "disabled": "Styles applied to the root element if {{conditions}}.",
    "adornedStart": "Styles applied to the root element if {{conditions}}.",
    "adornedEnd": "Styles applied to the root element if {{conditions}}.",
    "error": "Pseudo-class applied to the root element if {{conditions}}.",
    "marginDense": "Styles applied to the `input` element if {{conditions}}.",
    "multiline": "Styles applied to the root element if {{conditions}}.",
    "colorSecondary": "Styles applied to the root element if the color is secondary.",
    "fullWidth": "Styles applied to the root element if {{conditions}}.",
    "hiddenLabel": "Styles applied to the root element if {{conditions}}.",
    "input": "Styles applied to the `input` element.",
    "inputMarginDense": "Styles applied to the `input` element if {{conditions}}.",
    "inputMultiline": "Styles applied to the `input` element if {{conditions}}.",
    "inputTypeSearch": "Styles applied to the `input` element if {{conditions}}.",
    "inputAdornedStart": "Styles applied to the `input` element if {{conditions}}.",
    "inputAdornedEnd": "Styles applied to the `input` element if {{conditions}}.",
    "inputHiddenLabel": "Styles applied to the `input` element if {{conditions}}."
  },
  "InputLabel": {
    "root": "Styles applied to the root element.",
    "focused": "Pseudo-class applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "error": "Pseudo-class applied to the root element if {{conditions}}.",
    "required": "Pseudo-class applied to the root element if {{conditions}}.",
    "asterisk": "Pseudo-class applied to the asterisk element.",
    "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
    "marginDense": "Styles applied to the root element if {{conditions}}.",
    "shrink": "Styles applied to the `input` element if {{conditions}}.",
    "animated": "Styles applied to the `input` element unless {{conditions}}.",
    "filled": "Styles applied to the root element if {{conditions}}.",
    "outlined": "Styles applied to the root element if {{conditions}}."
  },
  "LinearProgress": {
    "root": "Styles applied to the root element.",
    "colorPrimary": "Styles applied to the root and bar2 element if {{conditions}}.",
    "colorSecondary": "Styles applied to the root and bar2 elements if {{conditions}}.",
    "determinate": "Styles applied to the root element if {{conditions}}.",
    "indeterminate": "Styles applied to the root element if {{conditions}}.",
    "buffer": "Styles applied to the root element if {{conditions}}.",
    "query": "Styles applied to the root element if {{conditions}}.",
    "dashed": "Styles applied to the additional bar element if {{conditions}}.",
    "dashedColorPrimary": "Styles applied to the additional bar element if {{conditions}}.",
    "dashedColorSecondary": "Styles applied to the additional bar element if {{conditions}}.",
    "bar": "Styles applied to the layered bar1 and bar2 elements.",
    "barColorPrimary": "Styles applied to the bar elements if {{conditions}}.",
    "barColorSecondary": "Styles applied to the bar elements if {{conditions}}.",
    "bar1Indeterminate": "Styles applied to the bar1 element if {{conditions}}.",
    "bar1Determinate": "Styles applied to the bar1 element if {{conditions}}.",
    "bar1Buffer": "Styles applied to the bar1 element if {{conditions}}.",
    "bar2Indeterminate": "Styles applied to the bar2 element if {{conditions}}.",
    "bar2Buffer": "Styles applied to the bar2 element if {{conditions}}."
  },
  "Link": {
    "root": "Styles applied to the root element.",
    "underlineNone": "Styles applied to the root element if {{conditions}}.",
    "underlineHover": "Styles applied to the root element if {{conditions}}.",
    "underlineAlways": "Styles applied to the root element if {{conditions}}.",
    "button": "Styles applied to the root element if {{conditions}}.",
    "focusVisible": "Pseudo-class applied to the root element if the link is keyboard focused."
  },
  "List": {
    "root": "Styles applied to the root element.",
    "padding": "Styles applied to the root element unless {{conditions}}.",
    "dense": "Styles applied to the root element if dense.",
    "subheader": "Styles applied to the root element if a `subheader` is provided."
  },
  "ListItem": {
    "root": "Styles applied to the (normally root) `component` element. May be wrapped by a `container`.",
    "container": "Styles applied to the `container` element if {{conditions}}.",
    "focusVisible": "Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if {{conditions}}.",
    "dense": "Styles applied to the `component` element if dense.",
    "alignItemsFlexStart": "Styles applied to the `component` element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the inner `component` element if {{conditions}}.",
    "divider": "Styles applied to the inner `component` element if {{conditions}}.",
    "gutters": "Styles applied to the inner `component` element unless {{conditions}}.",
    "button": "Styles applied to the inner `component` element if {{conditions}}.",
    "secondaryAction": "Styles applied to the `component` element if {{conditions}}.",
    "selected": "Pseudo-class applied to the root element if {{conditions}}."
  },
  "ListItemAvatar": {
    "root": "Styles applied to the root element.",
    "alignItemsFlexStart": "Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`."
  },
  "ListItemIcon": {
    "root": "Styles applied to the root element.",
    "alignItemsFlexStart": "Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`."
  },
  "ListItemSecondaryAction": {
    "root": "Styles applied to the root element.",
    "disableGutters": "Styles applied to the root element when the parent `ListItem` has `disableGutters={true}`."
  },
  "ListItemText": {
    "root": "Styles applied to the root element.",
    "multiline": "Styles applied to the `Typography` components if primary and secondary are set.",
    "dense": "Styles applied to the `Typography` components if dense.",
    "inset": "Styles applied to the root element if {{conditions}}.",
    "primary": "Styles applied to the primary `Typography` component.",
    "secondary": "Styles applied to the secondary `Typography` component."
  },
  "ListSubheader": {
    "root": "Styles applied to the root element.",
    "colorPrimary": "Styles applied to the root element if {{conditions}}.",
    "colorInherit": "Styles applied to the root element if {{conditions}}.",
    "gutters": "Styles applied to the inner `component` element unless {{conditions}}.",
    "inset": "Styles applied to the root element if {{conditions}}.",
    "sticky": "Styles applied to the root element unless {{conditions}}."
  },
  "LoadingButton": {
    "root": "Styles applied to the root element.",
    "pending": "Styles applied to the root element if {{conditions}}.",
    "pendingIndicator": "Styles applied to the pendingIndicator element.",
    "pendingIndicatorCenter": "Styles applied to the pendingIndicator element if {{conditions}}.",
    "pendingIndicatorStart": "Styles applied to the pendingIndicator element if {{conditions}}.",
    "pendingIndicatorEnd": "Styles applied to the pendingIndicator element if {{conditions}}.",
    "endIconPendingEnd": "Styles applied to the endIcon element if {{conditions}}.",
    "startIconPendingStart": "Styles applied to the startIcon element if {{conditions}}.",
    "labelPendingCenter": "Styles applied to the label element if {{conditions}}."
  },
  "Menu": {
    "paper": "Styles applied to the `Paper` component.",
    "list": "Styles applied to the `List` component via `MenuList`."
  },
  "MenuItem": {
    "root": "Styles applied to the root element.",
    "gutters": "Styles applied to the root element unless {{conditions}}.",
    "selected": "Styles applied to the root element if {{conditions}}.",
    "dense": "Styles applied to the root element if dense."
  },
  "MenuList": {},
  "MobileStepper": {
    "root": "Styles applied to the root element.",
    "positionBottom": "Styles applied to the root element if {{conditions}}.",
    "positionTop": "Styles applied to the root element if {{conditions}}.",
    "positionStatic": "Styles applied to the root element if {{conditions}}.",
    "dots": "Styles applied to the dots container if {{conditions}}.",
    "dot": "Styles applied to each dot if {{conditions}}.",
    "dotActive": "Styles applied to a dot if {{conditions}}.",
    "progress": "Styles applied to the Linear Progress component if {{conditions}}."
  },
  "Modal": {},
  "NativeSelect": {
    "root": "Styles applied to the select component `root` class.",
    "select": "Styles applied to the select component `select` class.",
    "filled": "Styles applied to the select component if {{conditions}}.",
    "outlined": "Styles applied to the select component if {{conditions}}.",
    "selectMenu": "Styles applied to the select component `selectMenu` class.",
    "disabled": "Pseudo-class applied to the select component `disabled` class.",
    "icon": "Styles applied to the icon component.",
    "iconOpen": "Styles applied to the icon component if the popup is open.",
    "iconFilled": "Styles applied to the icon component if {{conditions}}.",
    "iconOutlined": "Styles applied to the icon component if {{conditions}}.",
    "nativeInput": "Styles applied to the underlying native input component."
  },
  "NoSsr": {},
  "OutlinedInput": {
    "root": "Styles applied to the root element.",
    "colorSecondary": "Styles applied to the root element if the color is secondary.",
    "focused": "Styles applied to the root element if the component is focused.",
    "disabled": "Styles applied to the root element if {{conditions}}.",
    "adornedStart": "Styles applied to the root element if {{conditions}}.",
    "adornedEnd": "Styles applied to the root element if {{conditions}}.",
    "error": "Pseudo-class applied to the root element if {{conditions}}.",
    "marginDense": "Styles applied to the `input` element if {{conditions}}.",
    "multiline": "Styles applied to the root element if {{conditions}}.",
    "notchedOutline": "Styles applied to the `NotchedOutline` element.",
    "input": "Styles applied to the `input` element.",
    "inputMarginDense": "Styles applied to the `input` element if {{conditions}}.",
    "inputMultiline": "Styles applied to the `input` element if {{conditions}}.",
    "inputAdornedStart": "Styles applied to the `input` element if {{conditions}}.",
    "inputAdornedEnd": "Styles applied to the `input` element if {{conditions}}."
  },
  "Pagination": {
    "root": "Styles applied to the root element.",
    "ul": "Styles applied to the ul element.",
    "outlined": "Styles applied to the root element if {{conditions}}.",
    "text": "Styles applied to the root element if {{conditions}}."
  },
  "PaginationItem": {
    "root": "Styles applied to the root element.",
    "page": "Styles applied to the root element if {{conditions}}.",
    "sizeSmall": "Styles applied applied to the root element if {{conditions}}.",
    "sizeLarge": "Styles applied applied to the root element if {{conditions}}.",
    "text": "Styles applied to the root element if {{conditions}}.",
    "textPrimary": "Styles applied to the root element if {{conditions}}.",
    "textSecondary": "Styles applied to the root element if {{conditions}}.",
    "outlined": "Styles applied to the root element if {{conditions}}.",
    "outlinedPrimary": "Styles applied to the root element if {{conditions}}.",
    "outlinedSecondary": "Styles applied to the root element if {{conditions}}.",
    "rounded": "Styles applied to the root element if {{conditions}}.",
    "ellipsis": "Styles applied to the root element if {{conditions}}.",
    "focusVisible": "Pseudo-class applied to the root element if keyboard focused.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "selected": "Pseudo-class applied to the root element if {{conditions}}.",
    "icon": "Styles applied to the icon element."
  },
  "Paper": {
    "root": "Styles applied to the root element.",
    "rounded": "Styles applied to the root element unless {{conditions}}.",
    "outlined": "Styles applied to the root element if {{conditions}}.",
    "elevation": "Styles applied to the root element if {{conditions}}."
  },
  "Popover": {
    "root": "Styles applied to the root element.",
    "paper": "Styles applied to the `Paper` component."
  },
  "Popper": {},
  "Portal": {},
  "Radio": {
    "root": "Styles applied to the root element.",
    "checked": "Pseudo-class applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "colorPrimary": "Styles applied to the root element if {{conditions}}.",
    "colorSecondary": "Styles applied to the root element if {{conditions}}."
  },
  "RadioGroup": {},
  "Rating": {
    "root": "Styles applied to the root element.",
    "sizeSmall": "Styles applied to the root element if {{conditions}}.",
    "sizeLarge": "Styles applied to the root element if {{conditions}}.",
    "readOnly": "Styles applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "focusVisible": "Pseudo-class applied to the root element if keyboard focused.",
    "visuallyHidden": "Visually hide an element.",
    "label": "Styles applied to the label elements.",
    "labelEmptyValueActive": "Styles applied to the label of the \"no value\" input when it is active.",
    "icon": "Styles applied to the icon wrapping elements.",
    "iconEmpty": "Styles applied to the icon wrapping elements when empty.",
    "iconFilled": "Styles applied to the icon wrapping elements when filled.",
    "iconHover": "Styles applied to the icon wrapping elements when hover.",
    "iconFocus": "Styles applied to the icon wrapping elements when focus.",
    "iconActive": "Styles applied to the icon wrapping elements when active.",
    "decimal": "Styles applied to the icon wrapping elements when decimals are necessary."
  },
  "ScopedCssBaseline": { "root": "Styles applied to the root element." },
  "Select": {
    "root": "Styles applied to the select component `root` class.",
    "select": "Styles applied to the select component `select` class.",
    "filled": "Styles applied to the select component if {{conditions}}.",
    "outlined": "Styles applied to the select component if {{conditions}}.",
    "selectMenu": "Styles applied to the select component `selectMenu` class.",
    "disabled": "Pseudo-class applied to the select component `disabled` class.",
    "icon": "Styles applied to the icon component.",
    "iconOpen": "Styles applied to the icon component if the popup is open.",
    "iconFilled": "Styles applied to the icon component if {{conditions}}.",
    "iconOutlined": "Styles applied to the icon component if {{conditions}}.",
    "nativeInput": "Styles applied to the underlying native input component."
  },
  "Skeleton": {
    "root": "Styles applied to the root element.",
    "text": "Styles applied to the root element if {{conditions}}.",
    "rectangular": "Styles applied to the root element if {{conditions}}.",
    "circular": "Styles applied to the root element if {{conditions}}.",
    "pulse": "Styles applied to the root element if {{conditions}}.",
    "wave": "Styles applied to the root element if {{conditions}}.",
    "withChildren": "Styles applied when the component is passed children.",
    "fitContent": "Styles applied when the component is passed children and no width.",
    "heightAuto": "Styles applied when the component is passed children and no height."
  },
  "Slide": {},
  "Slider": {
    "root": "Styles applied to the root element.",
    "colorPrimary": "Styles applied to the root element if {{conditions}}.",
    "colorSecondary": "Styles applied to the root element if {{conditions}}.",
    "marked": "Styles applied to the root element if {{conditions}}.",
    "vertical": "Pseudo-class applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root and thumb element if {{conditions}}.",
    "rail": "Styles applied to the rail element.",
    "track": "Styles applied to the track element.",
    "trackFalse": "Styles applied to the track element if {{conditions}}.",
    "trackInverted": "Styles applied to the track element if {{conditions}}.",
    "thumb": "Styles applied to the thumb element.",
    "thumbColorPrimary": "Styles applied to the thumb element if {{conditions}}.",
    "thumbColorSecondary": "Styles applied to the thumb element if {{conditions}}.",
    "active": "Pseudo-class applied to the thumb element if it's active.",
    "focusVisible": "Pseudo-class applied to the thumb element if keyboard focused.",
    "valueLabel": "Styles applied to the thumb label element.",
    "mark": "Styles applied to the mark element.",
    "markActive": "Styles applied to the mark element if active (depending on the value).",
    "markLabel": "Styles applied to the mark label element.",
    "markLabelActive": "Styles applied to the mark label element if active (depending on the value)."
  },
  "SliderStyled": {},
  "SliderUnstyled": {},
  "Snackbar": {
    "root": "Styles applied to the root element.",
    "anchorOriginTopCenter": "Styles applied to the root element if {{conditions}}.",
    "anchorOriginBottomCenter": "Styles applied to the root element if {{conditions}}.",
    "anchorOriginTopRight": "Styles applied to the root element if {{conditions}}.",
    "anchorOriginBottomRight": "Styles applied to the root element if {{conditions}}.",
    "anchorOriginTopLeft": "Styles applied to the root element if {{conditions}}.",
    "anchorOriginBottomLeft": "Styles applied to the root element if {{conditions}}."
  },
  "SnackbarContent": {
    "root": "Styles applied to the root element.",
    "message": "Styles applied to the message wrapper element.",
    "action": "Styles applied to the action wrapper element if {{conditions}}."
  },
  "SpeedDial": {
    "root": "Styles applied to the root element.",
    "fab": "Styles applied to the Fab component.",
    "directionUp": "Styles applied to the root if direction=\"up\"",
    "directionDown": "Styles applied to the root if direction=\"down\"",
    "directionLeft": "Styles applied to the root if direction=\"left\"",
    "directionRight": "Styles applied to the root if direction=\"right\"",
    "actions": "Styles applied to the actions (`children` wrapper) element.",
    "actionsClosed": "Styles applied to the actions (`children` wrapper) element if {{conditions}}."
  },
  "SpeedDialAction": {
    "fab": "Styles applied to the Fab component.",
    "fabClosed": "Styles applied to the Fab component if {{conditions}}.",
    "staticTooltip": "Styles applied to the root element if {{conditions}}.",
    "staticTooltipClosed": "Styles applied to the root element if {{conditions}}.",
    "staticTooltipLabel": "Styles applied to the static tooltip label if {{conditions}}.",
    "tooltipPlacementLeft": "Styles applied to the root if {{conditions}}.",
    "tooltipPlacementRight": "Styles applied to the root if {{conditions}}."
  },
  "SpeedDialIcon": {
    "root": "Styles applied to the root element.",
    "icon": "Styles applied to the icon component.",
    "iconOpen": "Styles applied to the icon component if {{conditions}}.",
    "iconWithOpenIconOpen": "Styles applied to the icon when an `openIcon` is provided and if {{conditions}}.",
    "openIcon": "Styles applied to the `openIcon` if provided.",
    "openIconOpen": "Styles applied to the `openIcon` if provided and if {{conditions}}."
  },
  "Step": {
    "root": "Styles applied to the root element.",
    "horizontal": "Styles applied to the root element if {{conditions}}.",
    "vertical": "Styles applied to the root element if {{conditions}}.",
    "alternativeLabel": "Styles applied to the root element if {{conditions}}.",
    "completed": "Pseudo-class applied to the root element if {{conditions}}."
  },
  "StepButton": {
    "root": "Styles applied to the root element.",
    "horizontal": "Styles applied to the root element if {{conditions}}.",
    "vertical": "Styles applied to the root element if {{conditions}}.",
    "touchRipple": "Styles applied to the `ButtonBase` touch-ripple."
  },
  "StepConnector": {
    "root": "Styles applied to the root element.",
    "horizontal": "Styles applied to the root element if {{conditions}}.",
    "vertical": "Styles applied to the root element if {{conditions}}.",
    "alternativeLabel": "Styles applied to the root element if {{conditions}}.",
    "active": "Pseudo-class applied to the root element if {{conditions}}.",
    "completed": "Pseudo-class applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "line": "Styles applied to the line element.",
    "lineHorizontal": "Styles applied to the root element if {{conditions}}.",
    "lineVertical": "Styles applied to the root element if {{conditions}}."
  },
  "StepContent": {
    "root": "Styles applied to the root element.",
    "last": "Styles applied to the root element if {{conditions}}.",
    "transition": "Styles applied to the Transition component."
  },
  "StepIcon": {
    "root": "Styles applied to the root element.",
    "text": "Styles applied to the SVG text element.",
    "active": "Pseudo-class applied to the root element if {{conditions}}.",
    "completed": "Pseudo-class applied to the root element if {{conditions}}.",
    "error": "Pseudo-class applied to the root element if {{conditions}}."
  },
  "StepLabel": {
    "root": "Styles applied to the root element.",
    "horizontal": "Styles applied to the root element if {{conditions}}.",
    "vertical": "Styles applied to the root element if {{conditions}}.",
    "label": "Styles applied to the `Typography` component which wraps `children`.",
    "active": "Pseudo-class applied to the `Typography` component if {{conditions}}.",
    "completed": "Pseudo-class applied to the `Typography` component if {{conditions}}.",
    "error": "Pseudo-class applied to the root element and `Typography` component if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root element and `Typography` component if {{conditions}}.",
    "iconContainer": "Styles applied to the `icon` container element.",
    "alternativeLabel": "Pseudo-class applied to the root and icon container and `Typography` if {{conditions}}.",
    "labelContainer": "Styles applied to the container element which wraps `Typography` and `optional`."
  },
  "Stepper": {
    "root": "Styles applied to the root element.",
    "horizontal": "Styles applied to the root element if {{conditions}}.",
    "vertical": "Styles applied to the root element if {{conditions}}.",
    "alternativeLabel": "Styles applied to the root element if {{conditions}}."
  },
  "SvgIcon": {
    "root": "Styles applied to the root element.",
    "colorPrimary": "Styles applied to the root element if {{conditions}}.",
    "colorSecondary": "Styles applied to the root element if {{conditions}}.",
    "colorAction": "Styles applied to the root element if {{conditions}}.",
    "colorError": "Styles applied to the root element if {{conditions}}.",
    "colorDisabled": "Styles applied to the root element if {{conditions}}.",
    "fontSizeInherit": "Styles applied to the root element if {{conditions}}.",
    "fontSizeSmall": "Styles applied to the root element if {{conditions}}.",
    "fontSizeLarge": "Styles applied to the root element if {{conditions}}."
  },
  "SwipeableDrawer": {},
  "Switch": {
    "root": "Styles applied to the root element.",
    "edgeStart": "Styles applied to the root element if {{conditions}}.",
    "edgeEnd": "Styles applied to the root element if {{conditions}}.",
    "switchBase": "Styles applied to the internal `SwitchBase` component's `root` class.",
    "colorPrimary": "Styles applied to the internal SwitchBase component's root element if {{conditions}}.",
    "colorSecondary": "Styles applied to the internal SwitchBase component's root element if {{conditions}}.",
    "sizeSmall": "Styles applied to the root element if {{conditions}}.",
    "checked": "Pseudo-class applied to the internal `SwitchBase` component's `checked` class.",
    "disabled": "Pseudo-class applied to the internal SwitchBase component's disabled class.",
    "input": "Styles applied to the internal SwitchBase component's input element.",
    "thumb": "Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop.",
    "track": "Styles applied to the track element."
  },
  "Tab": {
    "root": "Styles applied to the root element.",
    "labelIcon": "Styles applied to the root element if both `icon` and `label` are provided.",
    "textColorInherit": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"inherit\"`.",
    "textColorPrimary": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"primary\"`.",
    "textColorSecondary": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"secondary\"`.",
    "selected": "Pseudo-class applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "fullWidth": "Styles applied to the root element if {{conditions}}.",
    "wrapped": "Styles applied to the root element if {{conditions}}.",
    "wrapper": "Styles applied to the `icon` and `label`'s wrapper element."
  },
  "TabContext": {},
  "TabList": {},
  "TabPanel": { "root": "Styles applied to the root element." },
  "TabScrollButton": {
    "root": "Styles applied to the root element.",
    "vertical": "Styles applied to the root element if {{conditions}}.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}."
  },
  "Table": {
    "root": "Styles applied to the root element.",
    "stickyHeader": "Styles applied to the root element if {{conditions}}."
  },
  "TableBody": { "root": "Styles applied to the root element." },
  "TableCell": {
    "root": "Styles applied to the root element.",
    "head": "Styles applied to the root element if {{conditions}}.",
    "body": "Styles applied to the root element if {{conditions}}.",
    "footer": "Styles applied to the root element if {{conditions}}.",
    "sizeSmall": "Styles applied to the root element if {{conditions}}.",
    "paddingCheckbox": "Styles applied to the root element if {{conditions}}.",
    "paddingNone": "Styles applied to the root element if {{conditions}}.",
    "alignLeft": "Styles applied to the root element if {{conditions}}.",
    "alignCenter": "Styles applied to the root element if {{conditions}}.",
    "alignRight": "Styles applied to the root element if {{conditions}}.",
    "alignJustify": "Styles applied to the root element if {{conditions}}.",
    "stickyHeader": "Styles applied to the root element if {{conditions}}."
  },
  "TableContainer": { "root": "Styles applied to the root element." },
  "TableFooter": { "root": "Styles applied to the root element." },
  "TableHead": { "root": "Styles applied to the root element." },
  "TablePagination": {
    "root": "Styles applied to the root element.",
    "toolbar": "Styles applied to the Toolbar component.",
    "spacer": "Styles applied to the spacer element.",
    "caption": "Styles applied to the caption Typography components if {{conditions}}.",
    "selectRoot": "Styles applied to the Select component root element.",
    "select": "Styles applied to the Select component `select` class.",
    "selectIcon": "Styles applied to the Select component `icon` class.",
    "input": "Styles applied to the `InputBase` component.",
    "menuItem": "Styles applied to the MenuItem component.",
    "actions": "Styles applied to the internal `TablePaginationActions` component."
  },
  "TableRow": {
    "root": "Styles applied to the root element.",
    "selected": "Pseudo-class applied to the root element if {{conditions}}.",
    "hover": "Pseudo-class applied to the root element if {{conditions}}.",
    "head": "Styles applied to the root element if table variant=\"head\".",
    "footer": "Styles applied to the root element if table variant=\"footer\"."
  },
  "TableSortLabel": {
    "root": "Styles applied to the root element.",
    "active": "Pseudo-class applied to the root element if {{conditions}}.",
    "icon": "Styles applied to the icon component.",
    "iconDirectionDesc": "Styles applied to the icon component if {{conditions}}.",
    "iconDirectionAsc": "Styles applied to the icon component if {{conditions}}."
  },
  "Tabs": {
    "root": "Styles applied to the root element.",
    "vertical": "Styles applied to the root element if {{conditions}}.",
    "flexContainer": "Styles applied to the flex container element.",
    "flexContainerVertical": "Styles applied to the flex container element if {{conditions}}.",
    "centered": "Styles applied to the flex container element if {{conditions}}.",
    "scroller": "Styles applied to the tablist element.",
    "fixed": "Styles applied to the tablist element if {{conditions}}.",
    "scrollableX": "Styles applied to the tablist element if {{conditions}}.",
    "scrollableY": "Styles applied to the tablist element if {{conditions}}.",
    "hideScrollbar": "Styles applied to the tablist element if {{conditions}}.",
    "scrollButtons": "Styles applied to the `ScrollButtonComponent` component.",
    "scrollButtonsHideMobile": "Styles applied to the `ScrollButtonComponent` component if {{conditions}}.",
    "indicator": "Styles applied to the `TabIndicator` component."
  },
  "TextField": { "root": "Styles applied to the root element." },
  "TextareaAutosize": {},
  "ThemeProvider": {},
  "Timeline": {
    "root": "Styles applied to the root element.",
    "alignLeft": "Styles applied to the root element if {{conditions}}.",
    "alignRight": "Styles applied to the root element if {{conditions}}.",
    "alignAlternate": "Styles applied to the root element if {{conditions}}."
  },
  "TimelineConnector": { "root": "Styles applied to the root element." },
  "TimelineContent": {
    "root": "Styles applied to the root element.",
    "alignRight": "Styles applied to the root element if {{conditions}}."
  },
  "TimelineDot": {
    "root": "Styles applied to the root element.",
    "filled": "Styles applied to the root element if {{conditions}}.",
    "outlined": "Styles applied to the root element if {{conditions}}.",
    "filledGrey": "Styles applied to the root element if {{conditions}}.",
    "outlinedGrey": "Styles applied to the root element if {{conditions}}.",
    "filledPrimary": "Styles applied to the root element if {{conditions}}.",
    "outlinedPrimary": "Styles applied to the root element if {{conditions}}.",
    "filledSecondary": "Styles applied to the root element if {{conditions}}.",
    "outlinedSecondary": "Styles applied to the root element if {{conditions}}."
  },
  "TimelineItem": {
    "root": "Styles applied to the root element.",
    "alignLeft": "Styles applied to the root element if {{conditions}}.",
    "alignRight": "Styles applied to the root element if {{conditions}}.",
    "alignAlternate": "Styles applied to the root element if {{conditions}}.",
    "missingOppositeContent": "Styles applied to the root element if TimelineOppositeContent isn't provided.",
    "content": "Styles applied to the timeline content node.",
    "oppositeContent": "Styles applied to the timeline opposite content node."
  },
  "TimelineOppositeContent": {
    "root": "Styles applied to the root element.",
    "alignRight": "Styles applied to the root element if {{conditions}}."
  },
  "TimelineSeparator": { "root": "Styles applied to the root element." },
  "ToggleButton": {
    "root": "Styles applied to the root element.",
    "disabled": "Pseudo-class applied to the root element if {{conditions}}.",
    "selected": "Pseudo-class applied to the root element if {{conditions}}.",
    "label": "Styles applied to the `label` wrapper element.",
    "sizeSmall": "Styles applied to the root element if {{conditions}}.",
    "sizeLarge": "Styles applied to the root element if {{conditions}}."
  },
  "ToggleButtonGroup": {
    "root": "Styles applied to the root element.",
    "vertical": "Styles applied to the root element if {{conditions}}.",
    "grouped": "Styles applied to the children.",
    "groupedHorizontal": "Styles applied to the children if {{conditions}}.",
    "groupedVertical": "Styles applied to the children if {{conditions}}."
  },
  "Toolbar": {
    "root": "Styles applied to the root element.",
    "gutters": "Styles applied to the root element unless {{conditions}}.",
    "regular": "Styles applied to the root element if {{conditions}}.",
    "dense": "Styles applied to the root element if {{conditions}}."
  },
  "Tooltip": {
    "popper": "Styles applied to the Popper component.",
    "popperInteractive": "Styles applied to the Popper component unless {{conditions}}.",
    "popperArrow": "Styles applied to the Popper component if {{conditions}}.",
    "tooltip": "Styles applied to the tooltip (label wrapper) element.",
    "tooltipArrow": "Styles applied to the tooltip (label wrapper) element if {{conditions}}.",
    "arrow": "Styles applied to the arrow element.",
    "touch": "Styles applied to the tooltip (label wrapper) element if the tooltip is opened by touch.",
    "tooltipPlacementLeft": "Styles applied to the tooltip (label wrapper) element if {{conditions}}.",
    "tooltipPlacementRight": "Styles applied to the tooltip (label wrapper) element if {{conditions}}.",
    "tooltipPlacementTop": "Styles applied to the tooltip (label wrapper) element if {{conditions}}.",
    "tooltipPlacementBottom": "Styles applied to the tooltip (label wrapper) element if {{conditions}}."
  },
  "TreeItem": {
    "root": "Styles applied to the root element.",
    "group": "Styles applied to the `role=\"group\"` element.",
    "content": "Styles applied to the content element.",
    "expanded": "Pseudo-class applied to the content element when expanded.",
    "selected": "Pseudo-class applied to the content element when selected.",
    "focused": "Pseudo-class applied to the content element when focused.",
    "disabled": "Pseudo-class applied to the element when disabled.",
    "iconContainer": "Styles applied to the tree node icon.",
    "label": "Styles applied to the label element."
  },
  "TreeView": { "root": "Styles applied to the root element." },
  "Typography": {
    "root": "Styles applied to the root element.",
    "body2": "Styles applied to the root element if {{conditions}}.",
    "body1": "Styles applied to the root element if {{conditions}}.",
    "caption": "Styles applied to the root element if {{conditions}}.",
    "button": "Styles applied to the root element if {{conditions}}.",
    "h1": "Styles applied to the root element if {{conditions}}.",
    "h2": "Styles applied to the root element if {{conditions}}.",
    "h3": "Styles applied to the root element if {{conditions}}.",
    "h4": "Styles applied to the root element if {{conditions}}.",
    "h5": "Styles applied to the root element if {{conditions}}.",
    "h6": "Styles applied to the root element if {{conditions}}.",
    "subtitle1": "Styles applied to the root element if {{conditions}}.",
    "subtitle2": "Styles applied to the root element if {{conditions}}.",
    "overline": "Styles applied to the root element if {{conditions}}.",
    "inherit": "Styles applied to the root element if {{conditions}}.",
    "alignLeft": "Styles applied to the root element if {{conditions}}.",
    "alignCenter": "Styles applied to the root element if {{conditions}}.",
    "alignRight": "Styles applied to the root element if {{conditions}}.",
    "alignJustify": "Styles applied to the root element if {{conditions}}.",
    "noWrap": "Styles applied to the root element if {{conditions}}.",
    "gutterBottom": "Styles applied to the root element if {{conditions}}.",
    "paragraph": "Styles applied to the root element if {{conditions}}.",
    "colorInherit": "Styles applied to the root element if {{conditions}}.",
    "colorPrimary": "Styles applied to the root element if {{conditions}}.",
    "colorSecondary": "Styles applied to the root element if {{conditions}}.",
    "colorTextPrimary": "Styles applied to the root element if {{conditions}}.",
    "colorTextSecondary": "Styles applied to the root element if {{conditions}}.",
    "colorError": "Styles applied to the root element if {{conditions}}.",
    "displayInline": "Styles applied to the root element if {{conditions}}.",
    "displayBlock": "Styles applied to the root element if {{conditions}}."
  },
  "Unstable_TrapFocus": {},
  "Zoom": {}
}
