{
  "Accordion": {
    "root": "Styles applied to the root element.",
    "rounded": "Styles applied to the root element unless `square={true}`.",
    "expanded": "Pseudo-class applied to the root element if `expanded={true}`.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "region": "Styles applied to the region element, the container of the children."
  },
  "AccordionActions": {
    "root": "Styles applied to the root element.",
    "spacing": "Styles applied to the root element unless `disableSpacing={true}`."
  },
  "AccordionDetails": { "root": "Styles applied to the root element." },
  "AccordionSummary": {
    "root": "Styles applied to the root element.",
    "expanded": "Pseudo-class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`.",
    "focusVisible": "Pseudo-class applied to the ButtonBase root element if the button is keyboard focused.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "content": "Styles applied to the children wrapper element.",
    "expandIconWrapper": "Styles applied to the `expandIcon`'s wrapper element."
  },
  "Alert": {
    "root": "Styles applied to the root element.",
    "filled": "Styles applied to the root element if `variant=\"filled\"`.",
    "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
    "standard": "Styles applied to the root element if `variant=\"standard\"`.",
    "standardSuccess": "Styles applied to the root element if `variant=\"standard\"` and `color=\"success\"`.",
    "standardInfo": "Styles applied to the root element if `variant=\"standard\"` and `color=\"info\"`.",
    "standardWarning": "Styles applied to the root element if `variant=\"standard\"` and `color=\"warning\"`.",
    "standardError": "Styles applied to the root element if `variant=\"standard\"` and `color=\"error\"`.",
    "outlinedSuccess": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"success\"`.",
    "outlinedInfo": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"info\"`.",
    "outlinedWarning": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"warning\"`.",
    "outlinedError": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"error\"`.",
    "filledSuccess": "Styles applied to the root element if `variant=\"filled\"` and `color=\"success\"`.",
    "filledInfo": "Styles applied to the root element if `variant=\"filled\"` and `color=\"info\"`.",
    "filledWarning": "Styles applied to the root element if `variant=\"filled\"` and `color=\"warning\"`.",
    "filledError": "Styles applied to the root element if `variant=\"filled\"` and `color=\"error\"`.",
    "icon": "Styles applied to the icon wrapper element.",
    "message": "Styles applied to the message wrapper element.",
    "action": "Styles applied to the action wrapper element if `action` is provided."
  },
  "AlertTitle": { "root": "Styles applied to the root element." },
  "AppBar": {
    "root": "Styles applied to the root element.",
    "positionFixed": "Styles applied to the root element if `position=\"fixed\"`.",
    "positionAbsolute": "Styles applied to the root element if `position=\"absolute\"`.",
    "positionSticky": "Styles applied to the root element if `position=\"sticky\"`.",
    "positionStatic": "Styles applied to the root element if `position=\"static\"`.",
    "positionRelative": "Styles applied to the root element if `position=\"relative\"`.",
    "colorDefault": "Styles applied to the root element if `color=\"default\"`.",
    "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
    "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
    "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
    "colorTransparent": "Styles applied to the root element if `color=\"transparent\"`."
  },
  "Autocomplete": {
    "root": "Styles applied to the root element.",
    "@media (pointer": "Avoid double tap issue on iOS",
    "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
    "focused": "Pseudo-class applied to the root element if focused.",
    "tag": "Styles applied to the tag elements, e.g. the chips.",
    "tagSizeSmall": "Styles applied to the tag elements, e.g. the chips if `size=\"small\"`.",
    "hasPopupIcon": "Styles applied when the popup icon is rendered.",
    "hasClearIcon": "Styles applied when the clear icon is rendered.",
    "inputRoot": "Styles applied to the Input element.",
    "input": "Styles applied to the input element.",
    "inputFocused": "Styles applied to the input element if tag focused.",
    "endAdornment": "Styles applied to the endAdornment element.",
    "clearIndicator": "Styles applied to the clear indicator.",
    "clearIndicatorDirty": "Styles applied to the clear indicator if the input is dirty.",
    "popupIndicator": "Styles applied to the popup indicator.",
    "popupIndicatorOpen": "Styles applied to the popup indicator if the popup is open.",
    "popper": "Styles applied to the popper element.",
    "popperDisablePortal": "Styles applied to the popper element if `disablePortal={true}`.",
    "paper": "Styles applied to the `Paper` component.",
    "listbox": "Styles applied to the `listbox` component.",
    "loading": "Styles applied to the loading wrapper.",
    "noOptions": "Styles applied to the no option wrapper.",
    "option": "Styles applied to the option elements.",
    "groupLabel": "Styles applied to the group's label elements.",
    "groupUl": "Styles applied to the group's ul elements."
  },
  "Avatar": {
    "root": "Styles applied to the root element.",
    "colorDefault": "Styles applied to the root element if not `src` or `srcSet`.",
    "circular": "Styles applied to the root element if `variant=\"circular\"`.",
    "rounded": "Styles applied to the root element if `variant=\"rounded\"`.",
    "square": "Styles applied to the root element if `variant=\"square\"`.",
    "img": "Styles applied to the img element if either `src` or `srcSet` is defined.",
    "fallback": "Styles applied to the fallback icon"
  },
  "AvatarGroup": {
    "root": "Styles applied to the root element.",
    "avatar": "Styles applied to the avatar elements."
  },
  "Backdrop": {
    "root": "Styles applied to the root element.",
    "invisible": "Styles applied to the root element if `invisible={true}`."
  },
  "Badge": {
    "root": "Styles applied to the root element.",
    "badge": "Styles applied to the badge `span` element.",
    "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
    "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
    "colorError": "Styles applied to the root element if `color=\"error\"`.",
    "dot": "Styles applied to the root element if `variant=\"dot\"`.",
    "standard": "Styles applied to the root element if `variant=\"standard\"`.",
    "anchorOriginTopRightRectangular": "Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap=\"rectangular\"`.",
    "anchorOriginBottomRightRectangular": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap=\"rectangular\"`.",
    "anchorOriginTopLeftRectangular": "Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap=\"rectangular\"`.",
    "anchorOriginBottomLeftRectangular": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap=\"rectangular\"`.",
    "anchorOriginTopRightCircular": "Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap=\"circular\"`.",
    "anchorOriginBottomRightCircular": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap=\"circular\"`.",
    "anchorOriginTopLeftCircular": "Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap=\"circular\"`.",
    "anchorOriginBottomLeftCircular": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap=\"circular\"`.",
    "invisible": "Pseudo-class to the badge `span` element if `invisible={true}`."
  },
  "BottomNavigation": { "root": "Styles applied to the root element." },
  "BottomNavigationAction": {
    "root": "Styles applied to the root element.",
    "selected": "Pseudo-class applied to the root element if selected.",
    "iconOnly": "Pseudo-class applied to the root element if `showLabel={false}` and not selected.",
    "wrapper": "Styles applied to the span element that wraps the icon and label.",
    "label": "Styles applied to the label's span element."
  },
  "Breadcrumbs": {
    "root": "Styles applied to the root element.",
    "ol": "Styles applied to the ol element.",
    "li": "Styles applied to the li element.",
    "separator": "Styles applied to the separator element."
  },
  "Button": {
    "root": "Styles applied to the root element.",
    "label": "Styles applied to the span element that wraps the children.",
    "text": "Styles applied to the root element if `variant=\"text\"`.",
    "textPrimary": "Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`.",
    "textSecondary": "Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`.",
    "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
    "outlinedPrimary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`.",
    "outlinedSecondary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`.",
    "contained": "Styles applied to the root element if `variant=\"contained\"`.",
    "containedPrimary": "Styles applied to the root element if `variant=\"contained\"` and `color=\"primary\"`.",
    "containedSecondary": "Styles applied to the root element if `variant=\"contained\"` and `color=\"secondary\"`.",
    "disableElevation": "Styles applied to the root element if `disableElevation={true}`.",
    "focusVisible": "Pseudo-class applied to the ButtonBase root element if the button is keyboard focused.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
    "textSizeSmall": "Styles applied to the root element if `size=\"small\"` and `variant=\"text\"`.",
    "textSizeLarge": "Styles applied to the root element if `size=\"large\"` and `variant=\"text\"`.",
    "outlinedSizeSmall": "Styles applied to the root element if `size=\"small\"` and `variant=\"outlined\"`.",
    "outlinedSizeLarge": "Styles applied to the root element if `size=\"large\"` and `variant=\"outlined\"`.",
    "containedSizeSmall": "Styles applied to the root element if `size=\"small\"` and `variant=\"contained\"`.",
    "containedSizeLarge": "Styles applied to the root element if `size=\"large\"` and `variant=\"contained\"`.",
    "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
    "sizeLarge": "Styles applied to the root element if `size=\"large\"`.",
    "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
    "startIcon": "Styles applied to the startIcon element if supplied.",
    "endIcon": "Styles applied to the endIcon element if supplied.",
    "iconSizeSmall": "Styles applied to the icon element if supplied and `size=\"small\"`.",
    "iconSizeMedium": "Styles applied to the icon element if supplied and `size=\"medium\"`.",
    "iconSizeLarge": "Styles applied to the icon element if supplied and `size=\"large\"`."
  },
  "ButtonBase": {
    "root": "Styles applied to the root element.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "focusVisible": "Pseudo-class applied to the root element if keyboard focused."
  },
  "ButtonGroup": {
    "root": "Styles applied to the root element.",
    "contained": "Styles applied to the root element if `variant=\"contained\"`.",
    "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
    "text": "Styles applied to the root element if `variant=\"text\"`.",
    "disableElevation": "Styles applied to the root element if `disableElevation={true}`.",
    "disabled": "Pseudo-class applied to child elements if `disabled={true}`.",
    "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
    "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
    "grouped": "Styles applied to the children.",
    "groupedHorizontal": "Styles applied to the children if `orientation=\"horizontal\"`.",
    "groupedVertical": "Styles applied to the children if `orientation=\"vertical\"`.",
    "groupedText": "Styles applied to the children if `variant=\"text\"`.",
    "groupedTextHorizontal": "Styles applied to the children if `variant=\"text\"` and `orientation=\"horizontal\"`.",
    "groupedTextVertical": "Styles applied to the children if `variant=\"text\"` and `orientation=\"vertical\"`.",
    "groupedTextPrimary": "Styles applied to the children if `variant=\"text\"` and `color=\"primary\"`.",
    "groupedTextSecondary": "Styles applied to the children if `variant=\"text\"` and `color=\"secondary\"`.",
    "groupedOutlined": "Styles applied to the children if `variant=\"outlined\"`.",
    "groupedOutlinedHorizontal": "Styles applied to the children if `variant=\"outlined\"` and `orientation=\"horizontal\"`.",
    "groupedOutlinedVertical": "Styles applied to the children if `variant=\"outlined\"` and `orientation=\"vertical\"`.",
    "groupedOutlinedPrimary": "Styles applied to the children if `variant=\"outlined\"` and `color=\"primary\"`.",
    "groupedOutlinedSecondary": "Styles applied to the children if `variant=\"outlined\"` and `color=\"secondary\"`.",
    "groupedContained": "Styles applied to the children if `variant=\"contained\"`.",
    "groupedContainedHorizontal": "Styles applied to the children if `variant=\"contained\"` and `orientation=\"horizontal\"`.",
    "groupedContainedVertical": "Styles applied to the children if `variant=\"contained\"` and `orientation=\"vertical\"`.",
    "groupedContainedPrimary": "Styles applied to the children if `variant=\"contained\"` and `color=\"primary\"`.",
    "groupedContainedSecondary": "Styles applied to the children if `variant=\"contained\"` and `color=\"secondary\"`."
  },
  "Card": { "root": "Styles applied to the root element." },
  "CardActionArea": {
    "root": "Styles applied to the root element.",
    "focusVisible": "Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused.",
    "focusHighlight": "Styles applied to the overlay that covers the action area when it is keyboard focused."
  },
  "CardActions": {
    "root": "Styles applied to the root element.",
    "spacing": "Styles applied to the root element unless `disableSpacing={true}`."
  },
  "CardContent": { "root": "Styles applied to the root element." },
  "CardHeader": {
    "root": "Styles applied to the root element.",
    "avatar": "Styles applied to the avatar element.",
    "action": "Styles applied to the action element.",
    "content": "Styles applied to the content wrapper element.",
    "title": "Styles applied to the title Typography element.",
    "subheader": "Styles applied to the subheader Typography element."
  },
  "CardMedia": {
    "root": "Styles applied to the root element.",
    "media": "Styles applied to the root element if `component=\"video, audio, picture, iframe, or img\"`.",
    "img": "Styles applied to the root element if `component=\"picture or img\"`."
  },
  "Checkbox": {
    "root": "Styles applied to the root element.",
    "checked": "Pseudo-class applied to the root element if `checked={true}`.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "indeterminate": "Pseudo-class applied to the root element if `indeterminate={true}`.",
    "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
    "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`."
  },
  "Chip": {
    "root": "Styles applied to the root element.",
    "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
    "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
    "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "clickable": "Styles applied to the root element if `onClick` is defined or `clickable={true}`.",
    "clickableColorPrimary": "Styles applied to the root element if `onClick` and `color=\"primary\"` is defined or `clickable={true}`.",
    "clickableColorSecondary": "Styles applied to the root element if `onClick` and `color=\"secondary\"` is defined or `clickable={true}`.",
    "deletable": "Styles applied to the root element if `onDelete` is defined.",
    "deletableColorPrimary": "Styles applied to the root element if `onDelete` and `color=\"primary\"` is defined.",
    "deletableColorSecondary": "Styles applied to the root element if `onDelete` and `color=\"secondary\"` is defined.",
    "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
    "filled": "Styles applied to the root element if `variant=\"filled\"`.",
    "outlinedPrimary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`.",
    "outlinedSecondary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`.",
    "avatar": "Styles applied to the `avatar` element.",
    "avatarSmall": "Styles applied to the `avatar` element if `size=\"small\"`.",
    "avatarColorPrimary": "Styles applied to the `avatar` element if `color=\"primary\"`.",
    "avatarColorSecondary": "Styles applied to the `avatar` element if `color=\"secondary\"`.",
    "icon": "Styles applied to the `icon` element.",
    "iconSmall": "Styles applied to the `icon` element if `size=\"small\"`.",
    "iconColorPrimary": "Styles applied to the `icon` element if `color=\"primary\"`.",
    "iconColorSecondary": "Styles applied to the `icon` element if `color=\"secondary\"`.",
    "label": "Styles applied to the label `span` element.",
    "labelSmall": "Styles applied to the label `span` element if `size=\"small\"`.",
    "deleteIcon": "Styles applied to the `deleteIcon` element.",
    "deleteIconSmall": "Styles applied to the `deleteIcon` element if `size=\"small\"`.",
    "deleteIconColorPrimary": "Styles applied to the deleteIcon element if `color=\"primary\"` and `variant=\"filled\"`.",
    "deleteIconColorSecondary": "Styles applied to the deleteIcon element if `color=\"secondary\"` and `variant=\"filled\"`.",
    "deleteIconOutlinedColorPrimary": "Styles applied to the deleteIcon element if `color=\"primary\"` and `variant=\"outlined\"`.",
    "deleteIconOutlinedColorSecondary": "Styles applied to the deleteIcon element if `color=\"secondary\"` and `variant=\"outlined\"`.",
    "focusVisible": "Pseudo-class applied to the root element if keyboard focused."
  },
  "CircularProgress": {
    "root": "Styles applied to the root element.",
    "determinate": "Styles applied to the root element if `variant=\"determinate\"`.",
    "indeterminate": "Styles applied to the root element if `variant=\"indeterminate\"`.",
    "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
    "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
    "svg": "Styles applied to the `svg` element.",
    "circle": "Styles applied to the `circle` svg path.",
    "circleDeterminate": "Styles applied to the `circle` svg path if `variant=\"determinate\"`.",
    "circleIndeterminate": "Styles applied to the `circle` svg path if `variant=\"indeterminate\"`.",
    "circleDisableShrink": "Styles applied to the `circle` svg path if `disableShrink={true}`."
  },
  "ClickAwayListener": {},
  "Collapse": {
    "root": "Styles applied to the root element.",
    "horizontal": "Pseudo-class applied to the root element if `orientation=\"horizontal\"`.",
    "entered": "Styles applied to the root element when the transition has entered.",
    "hidden": "Styles applied to the root element when the transition has exited and `collapsedSize` != 0px.",
    "wrapper": "Styles applied to the outer wrapper element.",
    "wrapperInner": "Styles applied to the inner wrapper element."
  },
  "Container": {
    "root": "Styles applied to the root element.",
    "disableGutters": "Styles applied to the root element if `disableGutters={true}`.",
    "fixed": "Styles applied to the root element if `fixed={true}`.",
    "maxWidthXs": "Styles applied to the root element if `maxWidth=\"xs\"`.",
    "maxWidthSm": "Styles applied to the root element if `maxWidth=\"sm\"`.",
    "maxWidthMd": "Styles applied to the root element if `maxWidth=\"md\"`.",
    "maxWidthLg": "Styles applied to the root element if `maxWidth=\"lg\"`.",
    "maxWidthXl": "Styles applied to the root element if `maxWidth=\"xl\"`."
  },
  "CssBaseline": {},
  "Dialog": {
    "root": "Styles applied to the root element.",
    "scrollPaper": "Styles applied to the container element if `scroll=\"paper\"`.",
    "scrollBody": "Styles applied to the container element if `scroll=\"body\"`.",
    "container": "Styles applied to the container element.",
    "paper": "Styles applied to the `Paper` component.",
    "paperScrollPaper": "Styles applied to the `Paper` component if `scroll=\"paper\"`.",
    "paperScrollBody": "Styles applied to the `Paper` component if `scroll=\"body\"`.",
    "paperWidthFalse": "Styles applied to the `Paper` component if `maxWidth=false`.",
    "paperWidthXs": "Styles applied to the `Paper` component if `maxWidth=\"xs\"`.",
    "paperWidthSm": "Styles applied to the `Paper` component if `maxWidth=\"sm\"`.",
    "paperWidthMd": "Styles applied to the `Paper` component if `maxWidth=\"md\"`.",
    "paperWidthLg": "Styles applied to the `Paper` component if `maxWidth=\"lg\"`.",
    "paperWidthXl": "Styles applied to the `Paper` component if `maxWidth=\"xl\"`.",
    "paperFullWidth": "Styles applied to the `Paper` component if `fullWidth={true}`.",
    "paperFullScreen": "Styles applied to the `Paper` component if `fullScreen={true}`."
  },
  "DialogActions": {
    "root": "Styles applied to the root element.",
    "spacing": "Styles applied to the root element unless `disableSpacing={true}`."
  },
  "DialogContent": {
    "root": "Styles applied to the root element.",
    "dividers": "Styles applied to the root element if `dividers={true}`."
  },
  "DialogContentText": { "root": "Styles applied to the root element." },
  "DialogTitle": { "root": "Styles applied to the root element." },
  "Divider": {
    "root": "Styles applied to the root element.",
    "absolute": "Styles applied to the root element if `absolute={true}`.",
    "inset": "Styles applied to the root element if `variant=\"inset\"`.",
    "fullWidth": "Styles applied to the root element if `variant=\"fullWidth\"`.",
    "light": "Styles applied to the root element if `light={true}`.",
    "middle": "Styles applied to the root element if `variant=\"middle\"`.",
    "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
    "flexItem": "Styles applied to the root element if `flexItem={true}`.",
    "withChildren": "Styles applied to the root element if divider have text.",
    "withChildrenVertical": "Styles applied to the root element if divider have text and `orientation=\"vertical\"`.",
    "textAlignRight": "Styles applied to the root element if `textAlign=\"right\" orientation=\"horizontal\"`.",
    "textAlignLeft": "Styles applied to the root element if `textAlign=\"left\" orientation=\"horizontal\"`.",
    "wrapper": "Styles applied to the span children element if `orientation=\"horizontal\"`.",
    "wrapperVertical": "Styles applied to the span children element if `orientation=\"vertical\"`."
  },
  "Drawer": {
    "root": "Styles applied to the root element.",
    "docked": "Styles applied to the root element if `variant=\"permanent or persistent\"`.",
    "paper": "Styles applied to the `Paper` component.",
    "paperAnchorLeft": "Styles applied to the `Paper` component if `anchor=\"left\"`.",
    "paperAnchorRight": "Styles applied to the `Paper` component if `anchor=\"right\"`.",
    "paperAnchorTop": "Styles applied to the `Paper` component if `anchor=\"top\"`.",
    "paperAnchorBottom": "Styles applied to the `Paper` component if `anchor=\"bottom\"`.",
    "paperAnchorDockedLeft": "Styles applied to the `Paper` component if `anchor=\"left\"` and `variant` is not \"temporary\".",
    "paperAnchorDockedTop": "Styles applied to the `Paper` component if `anchor=\"top\"` and `variant` is not \"temporary\".",
    "paperAnchorDockedRight": "Styles applied to the `Paper` component if `anchor=\"right\"` and `variant` is not \"temporary\".",
    "paperAnchorDockedBottom": "Styles applied to the `Paper` component if `anchor=\"bottom\"` and `variant` is not \"temporary\".",
    "modal": "Styles applied to the `Modal` component."
  },
  "Fab": {
    "root": "Styles applied to the root element.",
    "label": "Styles applied to the span element that wraps the children.",
    "primary": "Styles applied to the root element if `color=\"primary\"`.",
    "secondary": "Styles applied to the root element if `color=\"secondary\"`.",
    "extended": "Styles applied to the root element if `variant=\"extended\"`.",
    "circular": "Styles applied to the root element if `variant=\"circular\"`.",
    "focusVisible": "Pseudo-class applied to the ButtonBase root element if the button is keyboard focused.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
    "sizeSmall": "Styles applied to the root element if `size=\"small\"``.",
    "sizeMedium": "Styles applied to the root element if `size=\"medium\"``."
  },
  "Fade": {},
  "FilledInput": {
    "root": "Styles applied to the root element.",
    "colorSecondary": "Styles applied to the root element if color secondary.",
    "underline": "Styles applied to the root element unless `disableUnderline={true}`.",
    "focused": "Pseudo-class applied to the root element if the component is focused.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "adornedStart": "Styles applied to the root element if `startAdornment` is provided.",
    "adornedEnd": "Styles applied to the root element if `endAdornment` is provided.",
    "error": "Pseudo-class applied to the root element if `error={true}`.",
    "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
    "multiline": "Styles applied to the root element if `multiline={true}`.",
    "hiddenLabel": "Styles applied to the root element if `hiddenLabel={true}`.",
    "input": "Styles applied to the `input` element.",
    "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
    "inputHiddenLabel": "Styles applied to the `input` if in `<FormControl hiddenLabel />`.",
    "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
    "inputAdornedStart": "Styles applied to the `input` element if `startAdornment` is provided.",
    "inputAdornedEnd": "Styles applied to the `input` element if `endAdornment` is provided."
  },
  "FormControl": {
    "root": "Styles applied to the root element.",
    "marginNormal": "Styles applied to the root element if `margin=\"normal\"`.",
    "marginDense": "Styles applied to the root element if `margin=\"dense\"`.",
    "fullWidth": "Styles applied to the root element if `fullWidth={true}`."
  },
  "FormControlLabel": {
    "root": "Styles applied to the root element.",
    "labelPlacementStart": "Styles applied to the root element if `labelPlacement=\"start\"`.",
    "labelPlacementTop": "Styles applied to the root element if `labelPlacement=\"top\"`.",
    "labelPlacementBottom": "Styles applied to the root element if `labelPlacement=\"bottom\"`.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "label": "Styles applied to the label's Typography component."
  },
  "FormGroup": {
    "root": "Styles applied to the root element.",
    "row": "Styles applied to the root element if `row={true}`."
  },
  "FormHelperText": {
    "root": "Styles applied to the root element.",
    "error": "Pseudo-class applied to the root element if `error={true}`.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "marginDense": "Styles applied to the root element if `margin=\"dense\"`.",
    "contained": "Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`.",
    "focused": "Pseudo-class applied to the root element if `focused={true}`.",
    "filled": "Pseudo-class applied to the root element if `filled={true}`.",
    "required": "Pseudo-class applied to the root element if `required={true}`."
  },
  "FormLabel": {
    "root": "Styles applied to the root element.",
    "colorSecondary": "Styles applied to the root element if the color is secondary.",
    "focused": "Pseudo-class applied to the root element if `focused={true}`.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "error": "Pseudo-class applied to the root element if `error={true}`.",
    "filled": "Pseudo-class applied to the root element if `filled={true}`.",
    "required": "Pseudo-class applied to the root element if `required={true}`.",
    "asterisk": "Styles applied to the asterisk element."
  },
  "Grid": {
    "root": "Styles applied to the root element.",
    "container": "Styles applied to the root element if `container={true}`.",
    "item": "Styles applied to the root element if `item={true}`.",
    "zeroMinWidth": "Styles applied to the root element if `zeroMinWidth={true}`.",
    "direction-xs-column": "Styles applied to the root element if `direction=\"column\"`.",
    "direction-xs-column-reverse": "Styles applied to the root element if `direction=\"column-reverse\"`.",
    "direction-xs-row-reverse": "Styles applied to the root element if `direction=\"row-reverse\"`.",
    "wrap-xs-nowrap": "Styles applied to the root element if `wrap=\"nowrap\"`.",
    "wrap-xs-wrap-reverse": "Styles applied to the root element if `wrap=\"reverse\"`.",
    "align-items-xs-center": "Styles applied to the root element if `alignItems=\"center\"`.",
    "align-items-xs-flex-start": "Styles applied to the root element if `alignItems=\"flex-start\"`.",
    "align-items-xs-flex-end": "Styles applied to the root element if `alignItems=\"flex-end\"`.",
    "align-items-xs-baseline": "Styles applied to the root element if `alignItems=\"baseline\"`.",
    "align-content-xs-center": "Styles applied to the root element if `alignContent=\"center\"`.",
    "align-content-xs-flex-start": "Styles applied to the root element if `alignContent=\"flex-start\"`.",
    "align-content-xs-flex-end": "Styles applied to the root element if `alignContent=\"flex-end\"`.",
    "align-content-xs-space-between": "Styles applied to the root element if `alignContent=\"space-between\"`.",
    "align-content-xs-space-around": "Styles applied to the root element if `alignContent=\"space-around\"`.",
    "justify-content-xs-center": "Styles applied to the root element if `justifyContent=\"center\"`.",
    "justify-content-xs-flex-end": "Styles applied to the root element if `justifyContent=\"flex-end\"`.",
    "justify-content-xs-space-between": "Styles applied to the root element if `justifyContent=\"space-between\"`.",
    "justify-content-xs-space-around": "Styles applied to the root element if `justifyContent=\"space-around\"`.",
    "justify-content-xs-space-evenly": "Styles applied to the root element if `justifyContent=\"space-evenly\"`."
  },
  "Grow": {},
  "Hidden": {},
  "Icon": {
    "root": "Styles applied to the root element.",
    "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
    "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
    "colorAction": "Styles applied to the root element if `color=\"action\"`.",
    "colorError": "Styles applied to the root element if `color=\"error\"`.",
    "colorDisabled": "Styles applied to the root element if `color=\"disabled\"`.",
    "fontSizeInherit": "Styles applied to the root element if `fontSize=\"inherit\"`.",
    "fontSizeSmall": "Styles applied to the root element if `fontSize=\"small\"`.",
    "fontSizeLarge": "Styles applied to the root element if `fontSize=\"large\"`."
  },
  "IconButton": {
    "root": "Styles applied to the root element.",
    "edgeStart": "Styles applied to the root element if `edge=\"start\"`.",
    "edgeEnd": "Styles applied to the root element if `edge=\"end\"`.",
    "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
    "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
    "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
    "label": "Styles applied to the children container element."
  },
  "ImageList": {
    "root": "Styles applied to the root element.",
    "masonry": "Styles applied to the root element if `variant=\"masonry\"`.",
    "quilted": "Styles applied to the root element if `variant=\"quilted\"`.",
    "standard": "Styles applied to the root element if `variant=\"standard\"`.",
    "woven": "Styles applied to the root element if `variant=\"woven\"`."
  },
  "ImageListItem": {
    "root": "Styles applied to the root element.",
    "img": "Styles applied to an `img` element to ensure it covers the item.",
    "standard": "Styles applied to the root element if `variant=\"standard\"`.",
    "woven": "Styles applied to the root element if `variant=\"woven\"`."
  },
  "ImageListItemBar": {
    "root": "Styles applied to the root element.",
    "positionBottom": "Styles applied to the root element if `position=\"bottom\"`.",
    "positionTop": "Styles applied to the root element if `position=\"top\"`.",
    "positionBelow": "Styles applied to the root element if `position=\"below\"`.",
    "titleWrap": "Styles applied to the title and subtitle container element.",
    "titleWrapBelow": "Styles applied to the title and subtitle container element if `position=\"below\"`.",
    "titleWrapActionPosLeft": "Styles applied to the container element if `actionPosition=\"left\"`.",
    "titleWrapActionPosRight": "Styles applied to the container element if `actionPosition=\"right\"`.",
    "title": "Styles applied to the title container element.",
    "subtitle": "Styles applied to the subtitle container element.",
    "actionIcon": "Styles applied to the actionIcon if supplied.",
    "actionIconActionPosLeft": "Styles applied to the actionIcon if `actionPosition=\"left\"`."
  },
  "Input": {
    "root": "Styles applied to the root element.",
    "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
    "focused": "Styles applied to the root element if the component is focused.",
    "disabled": "Styles applied to the root element if `disabled={true}`.",
    "colorSecondary": "Styles applied to the root element if color secondary.",
    "underline": "Styles applied to the root element unless `disableUnderline={true}`.",
    "error": "Pseudo-class applied to the root element if `error={true}`.",
    "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
    "multiline": "Styles applied to the root element if `multiline={true}`.",
    "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
    "input": "Styles applied to the `input` element.",
    "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
    "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
    "inputTypeSearch": "Styles applied to the `input` element if `type=\"search\"`."
  },
  "InputAdornment": {
    "root": "Styles applied to the root element.",
    "filled": "Styles applied to the root element if `variant=\"filled\"`.",
    "positionStart": "Styles applied to the root element if `position=\"start\"`.",
    "positionEnd": "Styles applied to the root element if `position=\"end\"`.",
    "disablePointerEvents": "Styles applied to the root element if `disablePointerEvents=true`.",
    "hiddenLabel": "Styles applied if the adornment is used inside <FormControl hiddenLabel />.",
    "marginDense": "Styles applied if the adornment is used inside <FormControl margin=\"dense\" />."
  },
  "InputBase": {
    "root": "Styles applied to the root element.",
    "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
    "focused": "Styles applied to the root element if the component is focused.",
    "disabled": "Styles applied to the root element if `disabled={true}`.",
    "adornedStart": "Styles applied to the root element if `startAdornment` is provided.",
    "adornedEnd": "Styles applied to the root element if `endAdornment` is provided.",
    "error": "Pseudo-class applied to the root element if `error={true}`.",
    "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
    "multiline": "Styles applied to the root element if `multiline={true}`.",
    "colorSecondary": "Styles applied to the root element if the color is secondary.",
    "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
    "hiddenLabel": "Styles applied to the root element if `hiddenLabel={true}`.",
    "input": "Styles applied to the `input` element.",
    "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
    "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
    "inputTypeSearch": "Styles applied to the `input` element if `type=\"search\"`.",
    "inputAdornedStart": "Styles applied to the `input` element if `startAdornment` is provided.",
    "inputAdornedEnd": "Styles applied to the `input` element if `endAdornment` is provided.",
    "inputHiddenLabel": "Styles applied to the `input` element if `hiddenLabel={true}`."
  },
  "InputLabel": {
    "root": "Styles applied to the root element.",
    "focused": "Pseudo-class applied to the root element if `focused={true}`.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "error": "Pseudo-class applied to the root element if `error={true}`.",
    "required": "Pseudo-class applied to the root element if `required={true}`.",
    "asterisk": "Pseudo-class applied to the asterisk element.",
    "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
    "marginDense": "Styles applied to the root element if `margin=\"dense\"`.",
    "shrink": "Styles applied to the `input` element if `shrink={true}`.",
    "animated": "Styles applied to the `input` element unless `disableAnimation={true}`.",
    "filled": "Styles applied to the root element if `variant=\"filled\"`.",
    "outlined": "Styles applied to the root element if `variant=\"outlined\"`."
  },
  "LinearProgress": {
    "root": "Styles applied to the root element.",
    "colorPrimary": "Styles applied to the root and bar2 element if `color=\"primary\"`; bar2 if `variant=\"buffer\"`.",
    "colorSecondary": "Styles applied to the root and bar2 elements if `color=\"secondary\"`; bar2 if `variant=\"buffer\"`.",
    "determinate": "Styles applied to the root element if `variant=\"determinate\"`.",
    "indeterminate": "Styles applied to the root element if `variant=\"indeterminate\"`.",
    "buffer": "Styles applied to the root element if `variant=\"buffer\"`.",
    "query": "Styles applied to the root element if `variant=\"query\"`.",
    "dashed": "Styles applied to the additional bar element if `variant=\"buffer\"`.",
    "dashedColorPrimary": "Styles applied to the additional bar element if `variant=\"buffer\"` and `color=\"primary\"`.",
    "dashedColorSecondary": "Styles applied to the additional bar element if `variant=\"buffer\"` and `color=\"secondary\"`.",
    "bar": "Styles applied to the layered bar1 and bar2 elements.",
    "barColorPrimary": "Styles applied to the bar elements if `color=\"primary\"`; bar2 if `variant` not \"buffer\".",
    "barColorSecondary": "Styles applied to the bar elements if `color=\"secondary\"`; bar2 if `variant` not \"buffer\".",
    "bar1Indeterminate": "Styles applied to the bar1 element if `variant=\"indeterminate or query\"`.",
    "bar1Determinate": "Styles applied to the bar1 element if `variant=\"determinate\"`.",
    "bar1Buffer": "Styles applied to the bar1 element if `variant=\"buffer\"`.",
    "bar2Indeterminate": "Styles applied to the bar2 element if `variant=\"indeterminate or query\"`.",
    "bar2Buffer": "Styles applied to the bar2 element if `variant=\"buffer\"`."
  },
  "Link": {
    "root": "Styles applied to the root element.",
    "underlineNone": "Styles applied to the root element if `underline=\"none\"`.",
    "underlineHover": "Styles applied to the root element if `underline=\"hover\"`.",
    "underlineAlways": "Styles applied to the root element if `underline=\"always\"`.",
    "button": "Styles applied to the root element if `component=\"button\"`.",
    "focusVisible": "Pseudo-class applied to the root element if the link is keyboard focused."
  },
  "List": {
    "root": "Styles applied to the root element.",
    "padding": "Styles applied to the root element unless `disablePadding={true}`.",
    "dense": "Styles applied to the root element if dense.",
    "subheader": "Styles applied to the root element if a `subheader` is provided."
  },
  "ListItem": {
    "root": "Styles applied to the (normally root) `component` element. May be wrapped by a `container`.",
    "container": "Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`.",
    "focusVisible": "Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`.",
    "dense": "Styles applied to the `component` element if dense.",
    "alignItemsFlexStart": "Styles applied to the `component` element if `alignItems=\"flex-start\"`.",
    "disabled": "Pseudo-class applied to the inner `component` element if `disabled={true}`.",
    "divider": "Styles applied to the inner `component` element if `divider={true}`.",
    "gutters": "Styles applied to the inner `component` element unless `disableGutters={true}`.",
    "button": "Styles applied to the inner `component` element if `button={true}`.",
    "secondaryAction": "Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`.",
    "selected": "Pseudo-class applied to the root element if `selected={true}`."
  },
  "ListItemAvatar": {
    "root": "Styles applied to the root element.",
    "alignItemsFlexStart": "Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`."
  },
  "ListItemIcon": {
    "root": "Styles applied to the root element.",
    "alignItemsFlexStart": "Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`."
  },
  "ListItemSecondaryAction": {
    "root": "Styles applied to the root element.",
    "disableGutters": "Styles applied to the root element when the parent `ListItem` has `disableGutters={true}`."
  },
  "ListItemText": {
    "root": "Styles applied to the root element.",
    "multiline": "Styles applied to the `Typography` components if primary and secondary are set.",
    "dense": "Styles applied to the `Typography` components if dense.",
    "inset": "Styles applied to the root element if `inset={true}`.",
    "primary": "Styles applied to the primary `Typography` component.",
    "secondary": "Styles applied to the secondary `Typography` component."
  },
  "ListSubheader": {
    "root": "Styles applied to the root element.",
    "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
    "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
    "gutters": "Styles applied to the inner `component` element unless `disableGutters={true}`.",
    "inset": "Styles applied to the root element if `inset={true}`.",
    "sticky": "Styles applied to the root element unless `disableSticky={true}`."
  },
  "LoadingButton": {
    "root": "Styles applied to the root element.",
    "pending": "Styles applied to the root element if `pending={true}`.",
    "pendingIndicator": "Styles applied to the pendingIndicator element.",
    "pendingIndicatorCenter": "Styles applied to the pendingIndicator element if `pendingPosition=\"center\"`.",
    "pendingIndicatorStart": "Styles applied to the pendingIndicator element if `pendingPosition=\"start\"`.",
    "pendingIndicatorEnd": "Styles applied to the pendingIndicator element if `pendingPosition=\"end\"`.",
    "endIconPendingEnd": "Styles applied to the endIcon element if `pending={true}` and `pendingPosition=\"end\"`.",
    "startIconPendingStart": "Styles applied to the startIcon element if `pending={true}` and `pendingPosition=\"start\"`.",
    "labelPendingCenter": "Styles applied to the label element if `pending={true}` and `pendingPosition=\"center\"`."
  },
  "Menu": {
    "paper": "Styles applied to the `Paper` component.",
    "list": "Styles applied to the `List` component via `MenuList`."
  },
  "MenuItem": {
    "root": "Styles applied to the root element.",
    "gutters": "Styles applied to the root element unless `disableGutters={true}`.",
    "selected": "Styles applied to the root element if `selected={true}`.",
    "dense": "Styles applied to the root element if dense."
  },
  "MenuList": {},
  "MobileStepper": {
    "root": "Styles applied to the root element.",
    "positionBottom": "Styles applied to the root element if `position=\"bottom\"`.",
    "positionTop": "Styles applied to the root element if `position=\"top\"`.",
    "positionStatic": "Styles applied to the root element if `position=\"static\"`.",
    "dots": "Styles applied to the dots container if `variant=\"dots\"`.",
    "dot": "Styles applied to each dot if `variant=\"dots\"`.",
    "dotActive": "Styles applied to a dot if `variant=\"dots\"` and this is the active step.",
    "progress": "Styles applied to the Linear Progress component if `variant=\"progress\"`."
  },
  "Modal": {},
  "NativeSelect": {
    "root": "Styles applied to the select component `root` class.",
    "select": "Styles applied to the select component `select` class.",
    "filled": "Styles applied to the select component if `variant=\"filled\"`.",
    "outlined": "Styles applied to the select component if `variant=\"outlined\"`.",
    "selectMenu": "Styles applied to the select component `selectMenu` class.",
    "disabled": "Pseudo-class applied to the select component `disabled` class.",
    "icon": "Styles applied to the icon component.",
    "iconOpen": "Styles applied to the icon component if the popup is open.",
    "iconFilled": "Styles applied to the icon component if `variant=\"filled\"`.",
    "iconOutlined": "Styles applied to the icon component if `variant=\"outlined\"`.",
    "nativeInput": "Styles applied to the underlying native input component."
  },
  "NoSsr": {},
  "OutlinedInput": {
    "root": "Styles applied to the root element.",
    "colorSecondary": "Styles applied to the root element if the color is secondary.",
    "focused": "Styles applied to the root element if the component is focused.",
    "disabled": "Styles applied to the root element if `disabled={true}`.",
    "adornedStart": "Styles applied to the root element if `startAdornment` is provided.",
    "adornedEnd": "Styles applied to the root element if `endAdornment` is provided.",
    "error": "Pseudo-class applied to the root element if `error={true}`.",
    "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
    "multiline": "Styles applied to the root element if `multiline={true}`.",
    "notchedOutline": "Styles applied to the `NotchedOutline` element.",
    "input": "Styles applied to the `input` element.",
    "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
    "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
    "inputAdornedStart": "Styles applied to the `input` element if `startAdornment` is provided.",
    "inputAdornedEnd": "Styles applied to the `input` element if `endAdornment` is provided."
  },
  "Pagination": {
    "root": "Styles applied to the root element.",
    "ul": "Styles applied to the ul element.",
    "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
    "text": "Styles applied to the root element if `variant=\"text\"`."
  },
  "PaginationItem": {
    "root": "Styles applied to the root element.",
    "page": "Styles applied to the root element if `type=\"page\"`.",
    "sizeSmall": "Styles applied applied to the root element if `size=\"small\"`.",
    "sizeLarge": "Styles applied applied to the root element if `size=\"large\"`.",
    "text": "Styles applied to the root element if `variant=\"text\"`.",
    "textPrimary": "Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`.",
    "textSecondary": "Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`.",
    "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
    "outlinedPrimary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`.",
    "outlinedSecondary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`.",
    "rounded": "Styles applied to the root element if `rounded=\"true\"`.",
    "ellipsis": "Styles applied to the root element if `type=\"start-ellipsis\"` or `type=\"end-ellipsis\"`.",
    "focusVisible": "Pseudo-class applied to the root element if keyboard focused.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "selected": "Pseudo-class applied to the root element if `selected={true}`.",
    "icon": "Styles applied to the icon element."
  },
  "Paper": {
    "root": "Styles applied to the root element.",
    "rounded": "Styles applied to the root element unless `square={true}`.",
    "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
    "elevation": "Styles applied to the root element if `variant=\"elevation\"`."
  },
  "Popover": {
    "root": "Styles applied to the root element.",
    "paper": "Styles applied to the `Paper` component."
  },
  "Popper": {},
  "Portal": {},
  "Radio": {
    "root": "Styles applied to the root element.",
    "checked": "Pseudo-class applied to the root element if `checked={true}`.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
    "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`."
  },
  "RadioGroup": {},
  "Rating": {
    "root": "Styles applied to the root element.",
    "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
    "sizeLarge": "Styles applied to the root element if `size=\"large\"`.",
    "readOnly": "Styles applied to the root element if `readOnly={true}`.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "focusVisible": "Pseudo-class applied to the root element if keyboard focused.",
    "label": "Styles applied to the label elements.",
    "labelEmptyValueActive": "Styles applied to the label of the \"no value\" input when it is active.",
    "icon": "Styles applied to the icon wrapping elements.",
    "iconEmpty": "Styles applied to the icon wrapping elements when empty.",
    "iconFilled": "Styles applied to the icon wrapping elements when filled.",
    "iconHover": "Styles applied to the icon wrapping elements when hover.",
    "iconFocus": "Styles applied to the icon wrapping elements when focus.",
    "iconActive": "Styles applied to the icon wrapping elements when active.",
    "decimal": "Styles applied to the icon wrapping elements when decimals are necessary."
  },
  "ScopedCssBaseline": { "root": "Styles applied to the root element." },
  "Select": {
    "root": "Styles applied to the select component `root` class.",
    "select": "Styles applied to the select component `select` class.",
    "filled": "Styles applied to the select component if `variant=\"filled\"`.",
    "outlined": "Styles applied to the select component if `variant=\"outlined\"`.",
    "selectMenu": "Styles applied to the select component `selectMenu` class.",
    "disabled": "Pseudo-class applied to the select component `disabled` class.",
    "icon": "Styles applied to the icon component.",
    "iconOpen": "Styles applied to the icon component if the popup is open.",
    "iconFilled": "Styles applied to the icon component if `variant=\"filled\"`.",
    "iconOutlined": "Styles applied to the icon component if `variant=\"outlined\"`.",
    "nativeInput": "Styles applied to the underlying native input component."
  },
  "Skeleton": {
    "root": "Styles applied to the root element.",
    "text": "Styles applied to the root element if `variant=\"text\"`.",
    "rectangular": "Styles applied to the root element if `variant=\"rectangular\"`.",
    "circular": "Styles applied to the root element if `variant=\"circular\"`.",
    "pulse": "Styles applied to the root element if `animation=\"pulse\"`.",
    "wave": "Styles applied to the root element if `animation=\"wave\"`.",
    "withChildren": "Styles applied when the component is passed children.",
    "fitContent": "Styles applied when the component is passed children and no width.",
    "heightAuto": "Styles applied when the component is passed children and no height."
  },
  "Slide": {},
  "Slider": {
    "root": "Styles applied to the root element.",
    "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
    "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
    "marked": "Styles applied to the root element if `marks` is provided with at least one label.",
    "vertical": "Pseudo-class applied to the root element if `orientation=\"vertical\"`.",
    "disabled": "Pseudo-class applied to the root and thumb element if `disabled={true}`.",
    "rail": "Styles applied to the rail element.",
    "track": "Styles applied to the track element.",
    "trackFalse": "Styles applied to the track element if `track={false}`.",
    "trackInverted": "Styles applied to the track element if `track=\"inverted\"`.",
    "thumb": "Styles applied to the thumb element.",
    "thumbColorPrimary": "Styles applied to the thumb element if `color=\"primary\"`.",
    "thumbColorSecondary": "Styles applied to the thumb element if `color=\"secondary\"`.",
    "active": "Pseudo-class applied to the thumb element if it's active.",
    "focusVisible": "Pseudo-class applied to the thumb element if keyboard focused.",
    "valueLabel": "Styles applied to the thumb label element.",
    "mark": "Styles applied to the mark element.",
    "markActive": "Styles applied to the mark element if active (depending on the value).",
    "markLabel": "Styles applied to the mark label element.",
    "markLabelActive": "Styles applied to the mark label element if active (depending on the value)."
  },
  "SliderStyled": {},
  "SliderUnstyled": {},
  "Snackbar": {
    "root": "Styles applied to the root element.",
    "anchorOriginTopCenter": "Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`.",
    "anchorOriginBottomCenter": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`.",
    "anchorOriginTopRight": "Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`.",
    "anchorOriginBottomRight": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`.",
    "anchorOriginTopLeft": "Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`.",
    "anchorOriginBottomLeft": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`."
  },
  "SnackbarContent": {
    "root": "Styles applied to the root element.",
    "message": "Styles applied to the message wrapper element.",
    "action": "Styles applied to the action wrapper element if `action` is provided."
  },
  "SpeedDial": {
    "root": "Styles applied to the root element.",
    "fab": "Styles applied to the Fab component.",
    "directionUp": "Styles applied to the root if direction=\"up\"",
    "directionDown": "Styles applied to the root if direction=\"down\"",
    "directionLeft": "Styles applied to the root if direction=\"left\"",
    "directionRight": "Styles applied to the root if direction=\"right\"",
    "actions": "Styles applied to the actions (`children` wrapper) element.",
    "actionsClosed": "Styles applied to the actions (`children` wrapper) element if `open={false}`."
  },
  "SpeedDialAction": {
    "fab": "Styles applied to the Fab component.",
    "fabClosed": "Styles applied to the Fab component if `open={false}`.",
    "staticTooltip": "Styles applied to the root element if `tooltipOpen={true}`.",
    "staticTooltipClosed": "Styles applied to the root element if `tooltipOpen={true}` and `open={false}`.",
    "staticTooltipLabel": "Styles applied to the static tooltip label if `tooltipOpen={true}`.",
    "tooltipPlacementLeft": "Styles applied to the root if `tooltipOpen={true}` and `tooltipPlacement=\"left\"``",
    "tooltipPlacementRight": "Styles applied to the root if `tooltipOpen={true}` and `tooltipPlacement=\"right\"``"
  },
  "SpeedDialIcon": {
    "root": "Styles applied to the root element.",
    "icon": "Styles applied to the icon component.",
    "iconOpen": "Styles applied to the icon component if `open={true}`.",
    "iconWithOpenIconOpen": "Styles applied to the icon when an `openIcon` is provided and if `open={true}`.",
    "openIcon": "Styles applied to the `openIcon` if provided.",
    "openIconOpen": "Styles applied to the `openIcon` if provided and if `open={true}`."
  },
  "Step": {
    "root": "Styles applied to the root element.",
    "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
    "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
    "alternativeLabel": "Styles applied to the root element if `alternativeLabel={true}`.",
    "completed": "Pseudo-class applied to the root element if `completed={true}`."
  },
  "StepButton": {
    "root": "Styles applied to the root element.",
    "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
    "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
    "touchRipple": "Styles applied to the `ButtonBase` touch-ripple."
  },
  "StepConnector": {
    "root": "Styles applied to the root element.",
    "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
    "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
    "alternativeLabel": "Styles applied to the root element if `alternativeLabel={true}`.",
    "active": "Pseudo-class applied to the root element if `active={true}`.",
    "completed": "Pseudo-class applied to the root element if `completed={true}`.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "line": "Styles applied to the line element.",
    "lineHorizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
    "lineVertical": "Styles applied to the root element if `orientation=\"vertical\"`."
  },
  "StepContent": {
    "root": "Styles applied to the root element.",
    "last": "Styles applied to the root element if `last={true}` (controlled by `Step`).",
    "transition": "Styles applied to the Transition component."
  },
  "StepIcon": {
    "root": "Styles applied to the root element.",
    "text": "Styles applied to the SVG text element.",
    "active": "Pseudo-class applied to the root element if `active={true}`.",
    "completed": "Pseudo-class applied to the root element if `completed={true}`.",
    "error": "Pseudo-class applied to the root element if `error={true}`."
  },
  "StepLabel": {
    "root": "Styles applied to the root element.",
    "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
    "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
    "label": "Styles applied to the `Typography` component which wraps `children`.",
    "active": "Pseudo-class applied to the `Typography` component if `active={true}`.",
    "completed": "Pseudo-class applied to the `Typography` component if `completed={true}`.",
    "error": "Pseudo-class applied to the root element and `Typography` component if `error={true}`.",
    "disabled": "Pseudo-class applied to the root element and `Typography` component if `disabled={true}`.",
    "iconContainer": "Styles applied to the `icon` container element.",
    "alternativeLabel": "Pseudo-class applied to the root and icon container and `Typography` if `alternativeLabel={true}`.",
    "labelContainer": "Styles applied to the container element which wraps `Typography` and `optional`."
  },
  "Stepper": {
    "root": "Styles applied to the root element.",
    "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
    "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
    "alternativeLabel": "Styles applied to the root element if `alternativeLabel={true}`."
  },
  "SvgIcon": {
    "root": "Styles applied to the root element.",
    "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
    "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
    "colorAction": "Styles applied to the root element if `color=\"action\"`.",
    "colorError": "Styles applied to the root element if `color=\"error\"`.",
    "colorDisabled": "Styles applied to the root element if `color=\"disabled\"`.",
    "fontSizeInherit": "Styles applied to the root element if `fontSize=\"inherit\"`.",
    "fontSizeSmall": "Styles applied to the root element if `fontSize=\"small\"`.",
    "fontSizeLarge": "Styles applied to the root element if `fontSize=\"large\"`."
  },
  "SwipeableDrawer": {},
  "Switch": {
    "root": "Styles applied to the root element.",
    "edgeStart": "Styles applied to the root element if `edge=\"start\"`.",
    "edgeEnd": "Styles applied to the root element if `edge=\"end\"`.",
    "switchBase": "Styles applied to the internal `SwitchBase` component's `root` class.",
    "colorPrimary": "Styles applied to the internal SwitchBase component's root element if `color=\"primary\"`.",
    "colorSecondary": "Styles applied to the internal SwitchBase component's root element if `color=\"secondary\"`.",
    "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
    "checked": "Pseudo-class applied to the internal `SwitchBase` component's `checked` class.",
    "disabled": "Pseudo-class applied to the internal SwitchBase component's disabled class.",
    "input": "Styles applied to the internal SwitchBase component's input element.",
    "thumb": "Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop.",
    "track": "Styles applied to the track element."
  },
  "Tab": {
    "root": "Styles applied to the root element.",
    "labelIcon": "Styles applied to the root element if both `icon` and `label` are provided.",
    "textColorInherit": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"inherit\"`.",
    "textColorPrimary": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"primary\"`.",
    "textColorSecondary": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"secondary\"`.",
    "selected": "Pseudo-class applied to the root element if `selected={true}` (controlled by the Tabs component).",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}` (controlled by the Tabs component).",
    "fullWidth": "Styles applied to the root element if `fullWidth={true}` (controlled by the Tabs component).",
    "wrapped": "Styles applied to the root element if `wrapped={true}`.",
    "wrapper": "Styles applied to the `icon` and `label`'s wrapper element."
  },
  "TabContext": {},
  "TabList": {},
  "TabPanel": { "root": "Styles applied to the root element." },
  "TabScrollButton": {
    "root": "Styles applied to the root element.",
    "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`."
  },
  "Table": {
    "root": "Styles applied to the root element.",
    "stickyHeader": "Styles applied to the root element if `stickyHeader={true}`."
  },
  "TableBody": { "root": "Styles applied to the root element." },
  "TableCell": {
    "root": "Styles applied to the root element.",
    "head": "Styles applied to the root element if `variant=\"head\"` or `context.table.head`.",
    "body": "Styles applied to the root element if `variant=\"body\"` or `context.table.body`.",
    "footer": "Styles applied to the root element if `variant=\"footer\"` or `context.table.footer`.",
    "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
    "paddingCheckbox": "Styles applied to the root element if `padding=\"checkbox\"`.",
    "paddingNone": "Styles applied to the root element if `padding=\"none\"`.",
    "alignLeft": "Styles applied to the root element if `align=\"left\"`.",
    "alignCenter": "Styles applied to the root element if `align=\"center\"`.",
    "alignRight": "Styles applied to the root element if `align=\"right\"`.",
    "alignJustify": "Styles applied to the root element if `align=\"justify\"`.",
    "stickyHeader": "Styles applied to the root element if `context.table.stickyHeader={true}`."
  },
  "TableContainer": { "root": "Styles applied to the root element." },
  "TableFooter": { "root": "Styles applied to the root element." },
  "TableHead": { "root": "Styles applied to the root element." },
  "TablePagination": {
    "root": "Styles applied to the root element.",
    "toolbar": "Styles applied to the Toolbar component.",
    "spacer": "Styles applied to the spacer element.",
    "caption": "Styles applied to the caption Typography components if `variant=\"caption\"`.",
    "selectRoot": "Styles applied to the Select component root element.",
    "select": "Styles applied to the Select component `select` class.",
    "selectIcon": "Styles applied to the Select component `icon` class.",
    "input": "Styles applied to the `InputBase` component.",
    "menuItem": "Styles applied to the MenuItem component.",
    "actions": "Styles applied to the internal `TablePaginationActions` component."
  },
  "TableRow": {
    "root": "Styles applied to the root element.",
    "selected": "Pseudo-class applied to the root element if `selected={true}`.",
    "hover": "Pseudo-class applied to the root element if `hover={true}`.",
    "head": "Styles applied to the root element if table variant=\"head\".",
    "footer": "Styles applied to the root element if table variant=\"footer\"."
  },
  "TableSortLabel": {
    "root": "Styles applied to the root element.",
    "active": "Pseudo-class applied to the root element if `active={true}`.",
    "icon": "Styles applied to the icon component.",
    "iconDirectionDesc": "Styles applied to the icon component if `direction=\"desc\"`.",
    "iconDirectionAsc": "Styles applied to the icon component if `direction=\"asc\"`."
  },
  "Tabs": {
    "root": "Styles applied to the root element.",
    "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
    "flexContainer": "Styles applied to the flex container element.",
    "flexContainerVertical": "Styles applied to the flex container element if `orientation=\"vertical\"`.",
    "centered": "Styles applied to the flex container element if `centered={true}` & `!variant=\"scrollable\"`.",
    "scroller": "Styles applied to the tablist element.",
    "fixed": "Styles applied to the tablist element if `!variant=\"scrollable\"`\b\b\b.",
    "scrollableX": "Styles applied to the tablist element if `variant=\"scrollable\"` and `orientation=\"horizontal\"`.",
    "scrollableY": "Styles applied to the tablist element if `variant=\"scrollable\"` and `orientation=\"vertical\"`.",
    "hideScrollbar": "Styles applied to the tablist element if `variant=\"scrollable\"` and `visibleScrollbar={false}`.",
    "scrollButtons": "Styles applied to the `ScrollButtonComponent` component.",
    "scrollButtonsHideMobile": "Styles applied to the `ScrollButtonComponent` component if `allowScrollButtonsMobile={true}`.",
    "indicator": "Styles applied to the `TabIndicator` component."
  },
  "TextField": { "root": "Styles applied to the root element." },
  "TextareaAutosize": {},
  "Timeline": {
    "root": "Styles applied to the root element.",
    "alignLeft": "Styles applied to the root element if `align=\"left\"`.",
    "alignRight": "Styles applied to the root element if `align=\"right\"`.",
    "alignAlternate": "Styles applied to the root element if `align=\"alternate\"`."
  },
  "TimelineConnector": { "root": "Styles applied to the root element." },
  "TimelineContent": {
    "root": "Styles applied to the root element.",
    "alignRight": "Styles applied to the root element if `align=\"right\"`."
  },
  "TimelineDot": {
    "root": "Styles applied to the root element.",
    "filled": "Styles applied to the root element if `variant=\"filled\"`.",
    "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
    "filledGrey": "Styles applied to the root element if `color=\"grey\"` and `variant=\"filled\"`.",
    "outlinedGrey": "Styles applied to the root element if `color=\"grey\"` and `variant=\"outlined\"`.",
    "filledPrimary": "Styles applied to the root element if `color=\"primary\"` and `variant=\"filled\"`.",
    "outlinedPrimary": "Styles applied to the root element if `color=\"primary\"` and `variant=\"outlined\"`.",
    "filledSecondary": "Styles applied to the root element if `color=\"secondary\"` and `variant=\"filled\"`.",
    "outlinedSecondary": "Styles applied to the root element if `color=\"secondary\"` and `variant=\"outlined\"`."
  },
  "TimelineItem": {
    "root": "Styles applied to the root element.",
    "alignLeft": "Styles applied to the root element if `align=\"left\"`.",
    "alignRight": "Styles applied to the root element if `align=\"right\"`.",
    "alignAlternate": "Styles applied to the root element if `align=\"alternate\"`.",
    "missingOppositeContent": "Styles applied to the root element if TimelineOppositeContent isn't provided.",
    "content": "Styles applied to the timeline content node.",
    "oppositeContent": "Styles applied to the timeline opposite content node."
  },
  "TimelineOppositeContent": {
    "root": "Styles applied to the root element.",
    "alignRight": "Styles applied to the root element if `align=\"right\"`."
  },
  "TimelineSeparator": { "root": "Styles applied to the root element." },
  "ToggleButton": {
    "root": "Styles applied to the root element.",
    "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
    "selected": "Pseudo-class applied to the root element if `selected={true}`.",
    "label": "Styles applied to the `label` wrapper element.",
    "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
    "sizeLarge": "Styles applied to the root element if `size=\"large\"`."
  },
  "ToggleButtonGroup": {
    "root": "Styles applied to the root element.",
    "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
    "grouped": "Styles applied to the children.",
    "groupedHorizontal": "Styles applied to the children if `orientation=\"horizontal\"`.",
    "groupedVertical": "Styles applied to the children if `orientation=\"vertical\"`."
  },
  "Toolbar": {
    "root": "Styles applied to the root element.",
    "gutters": "Styles applied to the root element unless `disableGutters={true}`.",
    "regular": "Styles applied to the root element if `variant=\"regular\"`.",
    "dense": "Styles applied to the root element if `variant=\"dense\"`."
  },
  "Tooltip": {
    "popper": "Styles applied to the Popper component.",
    "popperInteractive": "Styles applied to the Popper component unless `disableInteractive={true}`.",
    "popperArrow": "Styles applied to the Popper component if `arrow={true}`.",
    "tooltip": "Styles applied to the tooltip (label wrapper) element.",
    "tooltipArrow": "Styles applied to the tooltip (label wrapper) element if `arrow={true}`.",
    "arrow": "Styles applied to the arrow element.",
    "touch": "Styles applied to the tooltip (label wrapper) element if the tooltip is opened by touch.",
    "tooltipPlacementLeft": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"left\".",
    "tooltipPlacementRight": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"right\".",
    "tooltipPlacementTop": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"top\".",
    "tooltipPlacementBottom": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"bottom\"."
  },
  "TreeItem": {
    "root": "Styles applied to the root element.",
    "group": "Styles applied to the `role=\"group\"` element.",
    "content": "Styles applied to the content element.",
    "expanded": "Pseudo-class applied to the content element when expanded.",
    "selected": "Pseudo-class applied to the content element when selected.",
    "focused": "Pseudo-class applied to the content element when focused.",
    "disabled": "Pseudo-class applied to the element when disabled.",
    "iconContainer": "Styles applied to the tree node icon.",
    "label": "Styles applied to the label element."
  },
  "TreeView": { "root": "Styles applied to the root element." },
  "Typography": {
    "root": "Styles applied to the root element.",
    "body2": "Styles applied to the root element if `variant=\"body2\"`.",
    "body1": "Styles applied to the root element if `variant=\"body1\"`.",
    "caption": "Styles applied to the root element if `variant=\"caption\"`.",
    "button": "Styles applied to the root element if `variant=\"button\"`.",
    "h1": "Styles applied to the root element if `variant=\"h1\"`.",
    "h2": "Styles applied to the root element if `variant=\"h2\"`.",
    "h3": "Styles applied to the root element if `variant=\"h3\"`.",
    "h4": "Styles applied to the root element if `variant=\"h4\"`.",
    "h5": "Styles applied to the root element if `variant=\"h5\"`.",
    "h6": "Styles applied to the root element if `variant=\"h6\"`.",
    "subtitle1": "Styles applied to the root element if `variant=\"subtitle1\"`.",
    "subtitle2": "Styles applied to the root element if `variant=\"subtitle2\"`.",
    "overline": "Styles applied to the root element if `variant=\"overline\"`.",
    "inherit": "Styles applied to the root element if `variant=\"inherit\"`.",
    "alignLeft": "Styles applied to the root element if `align=\"left\"`.",
    "alignCenter": "Styles applied to the root element if `align=\"center\"`.",
    "alignRight": "Styles applied to the root element if `align=\"right\"`.",
    "alignJustify": "Styles applied to the root element if `align=\"justify\"`.",
    "noWrap": "Styles applied to the root element if `nowrap={true}`.",
    "gutterBottom": "Styles applied to the root element if `gutterBottom={true}`.",
    "paragraph": "Styles applied to the root element if `paragraph={true}`.",
    "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
    "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
    "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
    "colorTextPrimary": "Styles applied to the root element if `color=\"textPrimary\"`.",
    "colorTextSecondary": "Styles applied to the root element if `color=\"textSecondary\"`.",
    "colorError": "Styles applied to the root element if `color=\"error\"`.",
    "displayInline": "Styles applied to the root element if `display=\"inline\"`.",
    "displayBlock": "Styles applied to the root element if `display=\"block\"`."
  },
  "Unstable_TrapFocus": {},
  "Zoom": {}
}
