{
  "ButtonBase": "`ButtonBase` contains as few styles as possible.\r\nIt aims to be a simple building block for creating a button.\r\nIt contains a load of style reset and some focus/ripple logic.",
  "Chip": "Chips represent complex entities in small blocks, such as a contact.",
  "CircularProgress": "## ARIA\r\n\r\nIf the progress bar is describing the loading progress of a particular region of a page,\r\nyou should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\r\nattribute to `true` on that region until it has finished loading.",
  "ClickAwayListener": "Listen for click events that occur somewhere in the document, outside of the element itself.\r\nFor instance, if you need to hide a menu when people click anywhere else on your page.",
  "Collapse": "The Collapse transition is used by the\r\n[Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
  "CssBaseline": "Kickstart an elegant, consistent, and simple baseline to build upon.",
  "Dialog": "Dialogs are overlaid modal paper based components with a backdrop.",
  "Drawer": "The props of the [Modal](/api/modal/) component are available\r\nwhen `variant=\"temporary\"` is set.",
  "Fade": "The Fade transition is used by the [Modal](/components/modal/) component.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
  "FormControl": "Provides context such as filled/focused/error/required for form inputs.\r\nRelying on the context provides high flexibility and ensures that the state always stays\r\nconsistent across the children of the `FormControl`.\r\nThis context is used by the following components:\r\n\r\n - FormLabel\r\n - FormHelperText\r\n - Input\r\n - InputLabel\r\n\r\nYou can find one composition example below and more going to [the demos](/components/text-fields/#components).\r\n\r\n```jsx\r\n<FormControl>\r\n  <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\r\n  <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n  <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\r\n</FormControl>\r\n```\r\n\r\n⚠️ Only one `InputBase` can be used within a FormControl because it create visual inconsistencies.\r\nFor instance, only one input can be focused at the same time, the state shouldn't be shared.",
  "FormControlLabel": "Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.\r\nUse this component if you want to display an extra label.",
  "FormGroup": "`FormGroup` wraps controls such as `Checkbox` and `Switch`.\r\nIt provides compact row layout.\r\nFor the `Radio`, you should be using the `RadioGroup` component instead of this one.",
  "Grow": "The Grow transition is used by the [Tooltip](/components/tooltips/) and\r\n[Popover](/components/popover/) components.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
  "Hidden": "Responsively hides children based on the selected implementation.",
  "IconButton": "Refer to the [Icons](/components/icons/) section of the documentation\r\nregarding the available icon options.",
  "InputBase": "`InputBase` contains as few styles as possible.\r\nIt aims to be a simple building block for creating an input.\r\nIt contains a load of style reset and some state logic.",
  "LinearProgress": "## ARIA\r\n\r\nIf the progress bar is describing the loading progress of a particular region of a page,\r\nyou should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\r\nattribute to `true` on that region until it has finished loading.",
  "ListItem": "Uses an additional container component if `ListItemSecondaryAction` is the last child.",
  "ListItemAvatar": "A simple wrapper to apply `List` styles to an `Avatar`.",
  "ListItemIcon": "A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.",
  "ListItemSecondaryAction": "Must be used as the last child of ListItem to function properly.",
  "MenuList": "A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton.\r\nIt's exposed to help customization of the [`Menu`](/api/menu/) component. If you\r\nuse it separately you need to move focus into the component manually. Once\r\nthe focus is placed inside the component it is fully keyboard accessible.",
  "Modal": "Modal is a lower-level construct that is leveraged by the following components:\r\n\r\n- [Dialog](/api/dialog/)\r\n- [Drawer](/api/drawer/)\r\n- [Menu](/api/menu/)\r\n- [Popover](/api/popover/)\r\n\r\nIf you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component\r\nrather than directly using Modal.\r\n\r\nThis component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).",
  "NativeSelect": "An alternative to `<Select native />` with a much smaller bundle size footprint.",
  "NoSsr": "NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\r\n\r\nThis component can be useful in a variety of situations:\r\n- Escape hatch for broken dependencies not supporting SSR.\r\n- Improve the time-to-first paint on the client by only rendering above the fold.\r\n- Reduce the rendering time on the server.\r\n- Under too heavy server load, you can turn on service degradation.",
  "Popper": "Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.",
  "Portal": "Portals provide a first-class way to render children into a DOM node\r\nthat exists outside the DOM hierarchy of the parent component.",
  "Slide": "The Slide transition is used by the [Drawer](/components/drawers/) component.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
  "TableCell": "The component renders a `<th>` element when the parent context is a header\r\nor otherwise a `<td>` element.",
  "TablePagination": "A `TableCell` based component for placing inside `TableFooter` for pagination.",
  "TableRow": "Will automatically set dynamic row height\r\nbased on the material table element parent (head, body, etc).",
  "TableSortLabel": "A button based label for placing inside `TableCell` for column sorting.",
  "TextField": "The `TextField` is a convenience wrapper for the most common cases (80%).\r\nIt cannot be all things to all people, otherwise the API would grow out of control.\r\n\r\n## Advanced Configuration\r\n\r\nIt's important to understand that the text field is a simple abstraction\r\non top of the following components:\r\n\r\n- [FormControl](/api/form-control/)\r\n- [InputLabel](/api/input-label/)\r\n- [FilledInput](/api/filled-input/)\r\n- [OutlinedInput](/api/outlined-input/)\r\n- [Input](/api/input/)\r\n- [FormHelperText](/api/form-helper-text/)\r\n\r\nIf you wish to alter the props applied to the `input` element, you can do so as follows:\r\n\r\n```jsx\r\nconst inputProps = {\r\n  step: 300,\r\n};\r\n\r\nreturn <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\r\n```\r\n\r\nFor advanced cases, please look at the source of TextField by clicking on the\r\n\"Edit this page\" button above. Consider either:\r\n\r\n- using the upper case props for passing values directly to the components\r\n- using the underlying components directly as shown in the demos",
  "Unstable_TrapFocus": "Utility component that locks focus inside the component.",
  "Zoom": "The Zoom transition can be used for the floating variant of the\r\n[Button](/components/buttons/#floating-action-buttons) component.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally."
}
