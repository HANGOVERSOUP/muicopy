{
  "componentDescription": "",
  "propDescriptions": {
    "className": { "description": "Class name applied to the root element." },
    "endAdornment": { "description": "Trailing adornment for this input." },
    "error": {
      "description": "If <code>true</code>, the <code>input</code> will indicate an error by setting the <code>aria-invalid</code> attribute on the input and the <code>baseui--error</code> class on the root element. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component."
    },
    "id": { "description": "The id of the <code>input</code> element." },
    "name": { "description": "Name attribute of the <code>input</code> element." },
    "placeholder": {
      "description": "The short hint displayed in the <code>input</code> before the user enters a value."
    },
    "readOnly": {
      "description": "It prevents the user from changing the value of the field (not from interacting with the field)."
    },
    "render": {
      "description": "If <code>true</code>, a <code>textarea</code> element is rendered."
    },
    "startAdornment": { "description": "Leading adornment for this input." },
    "type": {
      "description": "Type of the <code>input</code> element. It should be <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types\">a valid HTML5 input type</a>."
    },
    "value": {
      "description": "The value of the <code>input</code> element, required for a controlled component."
    }
  },
  "classDescriptions": {
    "adornedEnd": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>endAdornment</code> is provided"
    },
    "adornedStart": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>startAdornment</code> is provided"
    },
    "disabled": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>disabled={true}</code>"
    },
    "error": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>error={true}</code>"
    },
    "focused": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "the component is focused"
    },
    "formControl": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "the component is a descendant of <code>FormControl</code>"
    },
    "input": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the input element"
    },
    "inputMultiline": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the input element",
      "conditions": "<code>multiline={true}</code>"
    },
    "inputTypeSearch": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the input element",
      "conditions": "<code>type=\"search\"</code>"
    },
    "multiline": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>multiline={true}</code>"
    },
    "root": { "description": "Class name applied to the root element." }
  }
}
