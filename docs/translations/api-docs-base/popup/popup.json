{
  "componentDescription": "",
  "propDescriptions": {
    "anchor": "An HTML element, <a href=\"https://floating-ui.com/docs/virtual-elements\">virtual element</a>, or a function that returns either. It&#39;s used to set the position of the popup.",
    "container": "An HTML element or function that returns one. The container will have the portal children appended to it. By default, it uses the body of the top-level document object, so it&#39;s <code>document.body</code> in these cases.",
    "disablePortal": "If <code>true</code>, the popup will be rendered where it is defined, without the use of portals.",
    "keepMounted": "If <code>true</code>, the popup will exist in the DOM even if it&#39;s closed. Its visibility will be controlled by the <code>display</code> CSS property.<br>Otherwise, a closed popup will be removed from the DOM.",
    "middleware": "Collection of Floating UI middleware to use when positioning the popup. If not provided, the <a href=\"https://floating-ui.com/docs/offset\"><code>offset</code></a> and <a href=\"https://floating-ui.com/docs/flip\"><code>flip</code></a> functions will be used.",
    "offset": "Distance between a popup and the trigger element. This prop is ignored when custom <code>middleware</code> is provided.",
    "open": "If <code>true</code>, the popup is visible.",
    "placement": "Determines where to place the popup relative to the trigger element.",
    "slotProps": "The props used for each slot inside the Popup.",
    "slots": "The components used for each slot inside the Popup. Either a string to use a HTML element or a component. See <a href=\"#slots\">Slots API</a> below for more details.",
    "strategy": "The type of CSS position property to use (absolute or fixed).",
    "withTransition": "If <code>true</code>, the popup will support open and close animations. In such a case, a function form of <code>children</code> must be used and <code>onEnter</code> and <code>onExited</code> callback functions must be called when the respective transitions or animations finish."
  },
  "classDescriptions": {
    "root": { "description": "Class name applied to the root element." },
    "open": { "description": "" }
  },
  "slotDescriptions": { "root": "The component that renders the root." }
}
