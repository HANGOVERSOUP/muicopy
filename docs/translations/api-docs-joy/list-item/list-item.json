{
  "componentDescription": "",
  "propDescriptions": {
    "children": "The content of the component.",
    "color": "The color of the component. It supports those theme colors that make sense for this component. To learn how to add your own colors, check out <a href=\"/joy-ui/customization/themed-components/#extend-colors\">Themed components—Extend colors</a>.",
    "component": "The component used for the root node. Either a string to use a HTML element or a component.",
    "endAction": "The element to display at the end of ListItem.",
    "nested": "If <code>true</code>, the component can contain NestedList.",
    "startAction": "The element to display at the start of ListItem.",
    "sticky": "If <code>true</code>, the component has sticky position (with top = 0).",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/getting-started/the-sx-prop/\">`sx` page</a> for more details.",
    "variant": "The <a href=\"https://mui.com/joy-ui/main-features/global-variants/\">global variant</a> to use. To learn how to add your own variants, check out <a href=\"/joy-ui/customization/themed-components/#extend-variants\">Themed components—Extend variants</a>."
  },
  "classDescriptions": {
    "root": { "description": "Styles applied to the root element." },
    "startAction": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the component element",
      "conditions": "<code>startAction</code> element is provided"
    },
    "endAction": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the component element",
      "conditions": "<code>endAction</code> element is provided"
    },
    "nested": {
      "description": "Styles applied to {{nodeName}}, {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "if nested={true}"
    },
    "nesting": {
      "description": "Styles applied to {{nodeName}}, {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "if it is under a nested list item"
    },
    "sticky": {
      "description": "Styles applied to {{nodeName}}, {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "if sticky={true}"
    },
    "colorPrimary": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"primary\"</code>"
    },
    "colorNeutral": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"neutral\"</code>"
    },
    "colorDanger": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"danger\"</code>"
    },
    "colorInfo": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"info\"</code>"
    },
    "colorSuccess": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"success\"</code>"
    },
    "colorWarning": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"warning\"</code>"
    },
    "colorContext": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "color inversion is triggered"
    },
    "variantPlain": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"plain\"</code>"
    },
    "variantSoft": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"soft\"</code>"
    },
    "variantOutlined": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"outlined\"</code>"
    },
    "variantSolid": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"solid\"</code>"
    }
  },
  "slotDescriptions": {
    "root": "The component that renders the root.",
    "startAction": "The component that renders the start action.",
    "endAction": "The component that renders the end action."
  }
}
