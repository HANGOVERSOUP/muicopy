{
  "componentDescription": "",
  "propDescriptions": {
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "defaultValue": "The default value. Use when the component is not controlled.",
    "disabled": "If <code>true</code>, the rating is disabled.",
    "emptyIcon": "The icon to display when empty.",
    "emptyLabelText": "The label read when the rating input is empty.",
    "getLabelText": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.\n\nFor localization purposes, you can use the provided <a href=\"/guides/localization/\">translations</a>.\n@param {number} value The rating label&#39;s value to format.\n@returns {string}\n@default function defaultLabelText(value) {\n  return <code>${value} Star${value !== 1 ? &#39;s&#39; : &#39;&#39;}</code>;\n}",
    "icon": "The icon to display.",
    "IconContainerComponent": "The component containing the icon.\n@default function IconContainer(props) {\n  const { value, ...other } = props;\n  return &lt;span {...other} /&gt;;\n}",
    "max": "Maximum rating.",
    "name": "The name attribute of the radio <code>input</code> elements.\nThis input <code>name</code> should be unique within the page.\nBeing unique within a form is insufficient since the <code>name</code> is used to generated IDs.",
    "onChange": "Callback fired when the value changes.\n@param {object} event The event source of the callback.\n@param {number} value The new value.",
    "onChangeActive": "Callback function that is fired when the hover state changes.\n@param {object} event The event source of the callback.\n@param {number} value The new value.",
    "precision": "The minimum increment value change allowed.",
    "readOnly": "Removes all hover effects and pointer events.",
    "size": "The size of the rating.",
    "value": "The rating value."
  },
  "classDescriptions": {
    "root": { "description": "Styles applied to the root element." },
    "sizeSmall": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>size=\"small\"</code>"
    },
    "sizeLarge": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>size=\"large\"</code>"
    },
    "readOnly": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>readOnly={true}</code>"
    },
    "disabled": {
      "description": "Pseudo-class applied to the root element if {{conditions}}.",
      "conditions": "<code>disabled={true}</code>"
    },
    "focusVisible": {
      "description": "Pseudo-class applied to the root element if keyboard focused."
    },
    "visuallyHidden": { "description": "Visually hide an element." },
    "label": { "description": "Styles applied to the label elements." },
    "labelEmptyValueActive": {
      "description": "Styles applied to the label of the \"no value\" input when it is active."
    },
    "icon": { "description": "Styles applied to the icon wrapping elements." },
    "iconEmpty": { "description": "Styles applied to the icon wrapping elements when empty." },
    "iconFilled": { "description": "Styles applied to the icon wrapping elements when filled." },
    "iconHover": { "description": "Styles applied to the icon wrapping elements when hover." },
    "iconFocus": { "description": "Styles applied to the icon wrapping elements when focus." },
    "iconActive": { "description": "Styles applied to the icon wrapping elements when active." },
    "decimal": {
      "description": "Styles applied to the icon wrapping elements when decimals are necessary."
    }
  }
}
