{
  "componentDescription": "",
  "propDescriptions": {
    "children": "The content of the component, normally an <code>IconButton</code> or string.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disablePointerEvents": "Disable pointer events on the root.\nThis allows for the content of the adornment to focus the <code>input</code> on click.",
    "disableTypography": "If children is a string then disable wrapping in a Typography component.",
    "position": "The position this adornment should appear relative to the <code>Input</code>.",
    "variant": "The variant to use.\nNote: If you are using the <code>TextField</code> component or the <code>FormControl</code> component\nyou do not have to set this manually."
  },
  "classDescriptions": {
    "root": { "description": "Styles applied to the root element." },
    "filled": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>variant=\"filled\"</code>"
    },
    "positionStart": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>position=\"start\"</code>"
    },
    "positionEnd": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>position=\"end\"</code>"
    },
    "disablePointerEvents": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>disablePointerEvents=true</code>"
    },
    "hiddenLabel": {
      "description": "Styles applied if the adornment is used inside <FormControl hiddenLabel />."
    },
    "marginDense": {
      "description": "Styles applied if the adornment is used inside <FormControl margin=\"dense\" />."
    }
  }
}
