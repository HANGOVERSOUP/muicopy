{
  "componentDescription": "<code>ButtonBase</code> contains as few styles as possible.\nIt aims to be a simple building block for creating a button.\nIt contains a load of style reset and some focus/ripple logic.",
  "propDescriptions": {
    "action": "A ref for imperative actions.\nIt currently only supports <code>focusVisible()</code> action.",
    "buttonRef": "@ignore\n\nUse that prop to pass a ref to the native button component.\n@deprecated Use <code>ref</code> instead.",
    "centerRipple": "If <code>true</code>, the ripples are centered.\nThey won&#39;t start at the cursor interaction position.",
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disabled": "If <code>true</code>, the base button is disabled.",
    "disableRipple": "If <code>true</code>, the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the <code>focusVisibleClassName</code>.",
    "disableTouchRipple": "If <code>true</code>, the touch ripple effect is disabled.",
    "focusRipple": "If <code>true</code>, the base button will have a keyboard focus ripple.",
    "focusVisibleClassName": "This prop can help a person know which element has the keyboard focus.\nThe class name will be applied when the element gain the focus through a keyboard interaction.\nIt&#39;s a polyfill for the <a href=\"https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo\">CSS :focus-visible selector</a>.\nThe rationale for using this feature <a href=\"https://github.com/WICG/focus-visible/blob/master/explainer.md\">is explained here</a>.\nA <a href=\"https://github.com/WICG/focus-visible\">polyfill can be used</a> to apply a <code>focus-visible</code> class to other components\nif needed.",
    "onFocusVisible": "Callback fired when the component is focused with a keyboard.\nWe trigger a <code>onFocus</code> callback too.",
    "tabIndex": "@default 0",
    "TouchRippleProps": "Props applied to the <code>TouchRipple</code> element."
  },
  "classDescriptions": {
    "root": { "description": "Styles applied to the root element." },
    "disabled": {
      "description": "Pseudo-class applied to the root element if {{conditions}}.",
      "conditions": "<code>disabled={true}</code>"
    },
    "focusVisible": {
      "description": "Pseudo-class applied to the root element if keyboard focused."
    }
  }
}
