{
  "name": "Popper",
  "filename": "/packages/material-ui/src/Popper/Popper.js",
  "description": "Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.",
  "props": {
    "anchorEl": {
      "type": {
        "name": "custom",
        "raw": "chainPropTypes(\n  PropTypes.oneOfType([HTMLElementType, PropTypes.object, PropTypes.func]),\n  (props) => {\n    if (props.open) {\n      const resolvedAnchorEl = getAnchorEl(props.anchorEl);\n\n      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {\n        const box = resolvedAnchorEl.getBoundingClientRect();\n\n        if (\n          process.env.NODE_ENV !== 'test' &&\n          box.top === 0 &&\n          box.left === 0 &&\n          box.right === 0 &&\n          box.bottom === 0\n        ) {\n          return new Error(\n            [\n              'Material-UI: The `anchorEl` prop provided to the component is invalid.',\n              'The anchor element should be part of the document layout.',\n              \"Make sure the element is present in the document or that it's not display none.\",\n            ].join('\\n'),\n          );\n        }\n      } else if (\n        !resolvedAnchorEl ||\n        typeof resolvedAnchorEl.getBoundingClientRect !== 'function' ||\n        (resolvedAnchorEl.contextElement != null &&\n          resolvedAnchorEl.contextElement.nodeType !== 1)\n      ) {\n        return new Error(\n          [\n            'Material-UI: The `anchorEl` prop provided to the component is invalid.',\n            'It should be an HTML element instance or a virtualElement ',\n            '(https://popper.js.org/docs/v2/virtual-elements/).',\n          ].join('\\n'),\n        );\n      }\n    }\n\n    return null;\n  },\n)",
        "description": "HTML element<br>&#124;&nbsp;object<br>&#124;&nbsp;func"
      },
      "required": false
    },
    "children": {
      "type": { "name": "union", "description": "node<br>&#124;&nbsp;func" },
      "required": false
    },
    "container": {
      "type": { "name": "union", "description": "HTML element<br>&#124;&nbsp;func" },
      "required": false
    },
    "disablePortal": {
      "type": { "name": "bool", "description": "bool" },
      "required": false,
      "jsdocDefaultValue": { "value": "false" },
      "defaultValue": { "value": "false", "computed": false }
    },
    "keepMounted": {
      "type": { "name": "bool", "description": "bool" },
      "required": false,
      "jsdocDefaultValue": { "value": "false" },
      "defaultValue": { "value": "false", "computed": false }
    },
    "modifiers": {
      "type": {
        "name": "arrayOf",
        "description": "Array&lt;{ data?: object, effect?: func, enabled?: bool, fn?: func, name: any, options?: object, phase?: 'afterMain'<br>&#124;&nbsp;'afterRead'<br>&#124;&nbsp;'afterWrite'<br>&#124;&nbsp;'beforeMain'<br>&#124;&nbsp;'beforeRead'<br>&#124;&nbsp;'beforeWrite'<br>&#124;&nbsp;'main'<br>&#124;&nbsp;'read'<br>&#124;&nbsp;'write', requires?: Array&lt;string&gt;, requiresIfExists?: Array&lt;string&gt; }&gt;"
      },
      "required": false
    },
    "open": { "type": { "name": "bool", "description": "bool" }, "required": true },
    "placement": {
      "type": {
        "name": "enum",
        "description": "'auto-end'<br>&#124;&nbsp;'auto-start'<br>&#124;&nbsp;'auto'<br>&#124;&nbsp;'bottom-end'<br>&#124;&nbsp;'bottom-start'<br>&#124;&nbsp;'bottom'<br>&#124;&nbsp;'left-end'<br>&#124;&nbsp;'left-start'<br>&#124;&nbsp;'left'<br>&#124;&nbsp;'right-end'<br>&#124;&nbsp;'right-start'<br>&#124;&nbsp;'right'<br>&#124;&nbsp;'top-end'<br>&#124;&nbsp;'top-start'<br>&#124;&nbsp;'top'"
      },
      "required": false,
      "jsdocDefaultValue": { "value": "'bottom'" },
      "defaultValue": { "value": "'bottom'", "computed": false }
    },
    "popperOptions": {
      "type": {
        "name": "shape",
        "description": "{ modifiers?: array, onFirstUpdate?: func, placement?: 'auto-end'<br>&#124;&nbsp;'auto-start'<br>&#124;&nbsp;'auto'<br>&#124;&nbsp;'bottom-end'<br>&#124;&nbsp;'bottom-start'<br>&#124;&nbsp;'bottom'<br>&#124;&nbsp;'left-end'<br>&#124;&nbsp;'left-start'<br>&#124;&nbsp;'left'<br>&#124;&nbsp;'right-end'<br>&#124;&nbsp;'right-start'<br>&#124;&nbsp;'right'<br>&#124;&nbsp;'top-end'<br>&#124;&nbsp;'top-start'<br>&#124;&nbsp;'top', strategy?: 'absolute'<br>&#124;&nbsp;'fixed' }"
      },
      "required": false,
      "jsdocDefaultValue": { "value": "{}" },
      "defaultValue": { "value": "{}", "computed": false }
    },
    "popperRef": {
      "type": { "name": "custom", "raw": "refType", "description": "ref" },
      "required": false
    },
    "style": { "type": { "name": "object" }, "required": false, "description": "@ignore" },
    "transition": {
      "type": { "name": "bool", "description": "bool" },
      "required": false,
      "jsdocDefaultValue": { "value": "false" },
      "defaultValue": { "value": "false", "computed": false }
    }
  },
  "spread": true,
  "styles": { "name": null, "globalClasses": {} },
  "forwardsRefTo": "HTMLDivElement",
  "inheritance": null,
  "demos": "- [Autocomplete](/components/autocomplete/)\n- [Menus](/components/menus/)\n- [Popper](/components/popper/)"
}
