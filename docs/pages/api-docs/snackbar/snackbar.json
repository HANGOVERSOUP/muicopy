{
  "componentDescription": "",
  "propDescriptions": {
    "action": "The action to display. It renders after the message, at the end of the snackbar.",
    "anchorOrigin": "The anchor of the <code>Snackbar</code>.\nOn smaller screens, the component grows to occupy all the available width,\nthe horizontal alignment is ignored.",
    "autoHideDuration": "The number of milliseconds to wait before automatically calling the\n<code>onClose</code> function. <code>onClose</code> should then set the state of the <code>open</code>\nprop to hide the Snackbar. This behavior is disabled by default with\nthe <code>null</code> value.",
    "children": "Replace the <code>SnackbarContent</code> component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "ClickAwayListenerProps": "Props applied to the <code>ClickAwayListener</code> element.",
    "ContentProps": "Props applied to the <a href=\"/api/snackbar-content/\"><code>SnackbarContent</code></a> element.",
    "disableWindowBlurListener": "If <code>true</code>, the <code>autoHideDuration</code> timer will expire even if the window is not focused.",
    "key": "When displaying multiple consecutive Snackbars from a parent rendering a single\n<Snackbar/>, add the key prop to ensure independent treatment of each message.\ne.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\nfeatures such as autoHideDuration may be canceled.",
    "message": "The message to display.",
    "onClose": "Callback fired when the component requests to be closed.\nTypically <code>onClose</code> is used to set state in the parent component,\nwhich is used to control the <code>Snackbar</code> <code>open</code> prop.\nThe <code>reason</code> parameter can optionally be used to control the response to <code>onClose</code>,\nfor example ignoring <code>clickaway</code>.\n\n@param {object} event The event source of the callback.\n@param {string} reason Can be: <code>&quot;timeout&quot;</code> (<code>autoHideDuration</code> expired), <code>&quot;clickaway&quot;</code>.",
    "open": "If <code>true</code>, <code>Snackbar</code> is open.",
    "resumeHideDuration": "The number of milliseconds to wait before dismissing after user interaction.\nIf <code>autoHideDuration</code> prop isn&#39;t specified, it does nothing.\nIf <code>autoHideDuration</code> prop is specified but <code>resumeHideDuration</code> isn&#39;t,\nwe default to <code>autoHideDuration / 2</code> ms.",
    "TransitionComponent": "The component used for the transition.\n<a href=\"/components/transitions/#transitioncomponent-prop\">Follow this guide</a> to learn more about the requirements for this component.",
    "transitionDuration": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n@default {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
    "TransitionProps": "Props applied to the transition element.\nBy default, the element is based on this <a href=\"http://reactcommunity.org/react-transition-group/transition\"><code>Transition</code></a> component."
  },
  "classDescriptions": {
    "root": { "description": "Styles applied to the root element." },
    "anchorOriginTopCenter": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>anchorOrigin={{ 'top', 'center' }}</code>"
    },
    "anchorOriginBottomCenter": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>anchorOrigin={{ 'bottom', 'center' }}</code>"
    },
    "anchorOriginTopRight": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>anchorOrigin={{ 'top', 'right' }}</code>"
    },
    "anchorOriginBottomRight": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>anchorOrigin={{ 'bottom', 'right' }}</code>"
    },
    "anchorOriginTopLeft": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>anchorOrigin={{ 'top', 'left' }}</code>"
    },
    "anchorOriginBottomLeft": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>anchorOrigin={{ 'bottom', 'left' }}</code>"
    }
  }
}
