{
  "componentDescription": "",
  "propDescriptions": {
    "boundaryCount": "Number of always visible pages at the beginning and end.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The active color.",
    "count": "The total number of pages.",
    "defaultPage": "The page selected by default when the component is uncontrolled.",
    "disabled": "If <code>true</code>, the component is disabled.",
    "getItemAriaLabel": "Accepts a function which returns a string value that provides a user-friendly name for the current page.\n\nFor localization purposes, you can use the provided <a href=\"/guides/localization/\">translations</a>.\n\n@param {string} type The link or button type to format (&#39;page&#39; | &#39;first&#39; | &#39;last&#39; | &#39;next&#39; | &#39;previous&#39;). Defaults to &#39;page&#39;.\n@param {number} page The page number to format.\n@param {bool} selected If true, the current page is selected.\n@returns {string}",
    "hideNextButton": "If <code>true</code>, hide the next-page button.",
    "hidePrevButton": "If <code>true</code>, hide the previous-page button.",
    "onChange": "Callback fired when the page is changed.\n\n@param {object} event The event source of the callback.\n@param {number} page The page selected.",
    "page": "The current page.",
    "renderItem": "Render the item.\n\n@param {PaginationRenderItemParams} params The props to spread on a PaginationItem.\n@returns {ReactNode}",
    "shape": "The shape of the pagination items.",
    "showFirstButton": "If <code>true</code>, show the first-page button.",
    "showLastButton": "If <code>true</code>, show the last-page button.",
    "siblingCount": "Number of always visible pages before and after the current page.",
    "size": "The size of the pagination component.",
    "variant": "The variant to use."
  },
  "classDescriptions": {
    "root": { "description": "Styles applied to the root element." },
    "ul": { "description": "Styles applied to the ul element." },
    "outlined": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>variant=\"outlined\"</code>"
    },
    "text": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>variant=\"text\"</code>"
    }
  }
}
