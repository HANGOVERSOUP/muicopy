{
  "parameters": {
    "options": {
      "type": { "name": "ReadonlyArray&lt;T&gt", "description": "ReadonlyArray&lt;T&gt" },
      "required": true
    },
    "autoComplete": { "type": { "name": "boolean", "description": "boolean" }, "default": "false" },
    "autoHighlight": {
      "type": { "name": "boolean", "description": "boolean" },
      "default": "false"
    },
    "autoSelect": { "type": { "name": "boolean", "description": "boolean" }, "default": "false" },
    "blurOnSelect": {
      "type": {
        "name": "&#39;touch&#39; | &#39;mouse&#39; | true | false",
        "description": "&#39;touch&#39; | &#39;mouse&#39; | true | false"
      },
      "default": "false"
    },
    "clearOnBlur": {
      "type": { "name": "boolean", "description": "boolean" },
      "default": "!props.freeSolo"
    },
    "clearOnEscape": {
      "type": { "name": "boolean", "description": "boolean" },
      "default": "false"
    },
    "componentName": { "type": { "name": "string", "description": "string" } },
    "defaultValue": {
      "type": {
        "name": "AutocompleteValue&lt;T, Multiple, DisableClearable, FreeSolo&gt",
        "description": "AutocompleteValue&lt;T, Multiple, DisableClearable, FreeSolo&gt"
      },
      "default": "props.multiple ? [] : null"
    },
    "disableClearable": {
      "type": { "name": "DisableClearable", "description": "DisableClearable" },
      "default": "false"
    },
    "disableCloseOnSelect": {
      "type": { "name": "boolean", "description": "boolean" },
      "default": "false"
    },
    "disabled": { "type": { "name": "boolean", "description": "boolean" }, "default": "false" },
    "disabledItemsFocusable": {
      "type": { "name": "boolean", "description": "boolean" },
      "default": "false"
    },
    "disableListWrap": {
      "type": { "name": "boolean", "description": "boolean" },
      "default": "false"
    },
    "filterOptions": {
      "type": {
        "name": "(options: T[], state: FilterOptionsState&lt;T&gt) =&gt T[]",
        "description": "(options: T[], state: FilterOptionsState&lt;T&gt) =&gt T[]"
      }
    },
    "filterSelectedOptions": {
      "type": { "name": "boolean", "description": "boolean" },
      "default": "false"
    },
    "freeSolo": { "type": { "name": "FreeSolo", "description": "FreeSolo" }, "default": "false" },
    "getOptionDisabled": {
      "type": { "name": "(option: T) =&gt boolean", "description": "(option: T) =&gt boolean" }
    },
    "getOptionLabel": {
      "type": {
        "name": "(option: T | AutocompleteFreeSoloValueMapping&lt;FreeSolo&gt) =&gt string",
        "description": "(option: T | AutocompleteFreeSoloValueMapping&lt;FreeSolo&gt) =&gt string"
      },
      "default": "(option) => option.label ?? option"
    },
    "groupBy": {
      "type": { "name": "(option: T) =&gt string", "description": "(option: T) =&gt string" }
    },
    "handleHomeEndKeys": {
      "type": { "name": "boolean", "description": "boolean" },
      "default": "!props.freeSolo"
    },
    "id": { "type": { "name": "string", "description": "string" } },
    "includeInputInList": {
      "type": { "name": "boolean", "description": "boolean" },
      "default": "false"
    },
    "inputValue": { "type": { "name": "string", "description": "string" } },
    "isOptionEqualToValue": {
      "type": {
        "name": "(option: T, value: T) =&gt boolean",
        "description": "(option: T, value: T) =&gt boolean"
      }
    },
    "multiple": { "type": { "name": "Multiple", "description": "Multiple" }, "default": "false" },
    "onChange": {
      "type": {
        "name": "(event: React.SyntheticEvent, value: AutocompleteValue&lt;T, Multiple, DisableClearable, FreeSolo&gt, reason: AutocompleteChangeReason, details?: AutocompleteChangeDetails&lt;T&gt) =&gt void",
        "description": "(event: React.SyntheticEvent, value: AutocompleteValue&lt;T, Multiple, DisableClearable, FreeSolo&gt, reason: AutocompleteChangeReason, details?: AutocompleteChangeDetails&lt;T&gt) =&gt void"
      }
    },
    "onClose": {
      "type": {
        "name": "(event: React.SyntheticEvent, reason: AutocompleteCloseReason) =&gt void",
        "description": "(event: React.SyntheticEvent, reason: AutocompleteCloseReason) =&gt void"
      }
    },
    "onHighlightChange": {
      "type": {
        "name": "(event: React.SyntheticEvent, option: T | null, reason: AutocompleteHighlightChangeReason) =&gt void",
        "description": "(event: React.SyntheticEvent, option: T | null, reason: AutocompleteHighlightChangeReason) =&gt void"
      }
    },
    "onInputChange": {
      "type": {
        "name": "(event: React.SyntheticEvent, value: string, reason: AutocompleteInputChangeReason) =&gt void",
        "description": "(event: React.SyntheticEvent, value: string, reason: AutocompleteInputChangeReason) =&gt void"
      }
    },
    "onOpen": {
      "type": {
        "name": "(event: React.SyntheticEvent) =&gt void",
        "description": "(event: React.SyntheticEvent) =&gt void"
      }
    },
    "open": { "type": { "name": "boolean", "description": "boolean" } },
    "openOnFocus": { "type": { "name": "boolean", "description": "boolean" }, "default": "false" },
    "readOnly": { "type": { "name": "boolean", "description": "boolean" }, "default": "false" },
    "selectOnFocus": {
      "type": { "name": "boolean", "description": "boolean" },
      "default": "!props.freeSolo"
    },
    "unstable_classNamePrefix": {
      "type": { "name": "string", "description": "string" },
      "default": "'Mui'"
    },
    "unstable_isActiveElementInListbox": {
      "type": {
        "name": "(listbox: React.RefObject&lt;HTMLElement&gt) =&gt boolean",
        "description": "(listbox: React.RefObject&lt;HTMLElement&gt) =&gt boolean"
      }
    },
    "value": {
      "type": {
        "name": "AutocompleteValue&lt;T, Multiple, DisableClearable, FreeSolo&gt",
        "description": "AutocompleteValue&lt;T, Multiple, DisableClearable, FreeSolo&gt"
      }
    }
  },
  "returnValue": {
    "getRootProps": {
      "type": {
        "name": "(externalProps?: any) => React.HTMLAttributes<HTMLDivElement>",
        "description": "Resolver for the root slot's props."
      },
      "required": true
    },
    "getInputProps": {
      "type": {
        "name": "() => React.InputHTMLAttributes<HTMLInputElement>",
        "description": "Resolver for the input element's props."
      },
      "required": true
    },
    "getInputLabelProps": {
      "type": {
        "name": "() => Omit<React.HTMLAttributes<HTMLLabelElement>, 'color'>",
        "description": "Resolver for the input label element's props."
      },
      "required": true
    },
    "getClearProps": {
      "type": {
        "name": "() => React.HTMLAttributes<HTMLButtonElement>",
        "description": "Resolver for the `clear` button element's props."
      },
      "required": true
    },
    "getPopupIndicatorProps": {
      "type": {
        "name": "() => React.HTMLAttributes<HTMLButtonElement>",
        "description": "Resolver for the popup icon's props."
      },
      "required": true
    },
    "getTagProps": {
      "type": {
        "name": "AutocompleteGetTagProps",
        "description": "A tag props getter."
      },
      "required": true
    },
    "getListboxProps": {
      "type": {
        "name": "() => React.HTMLAttributes<HTMLUListElement>",
        "description": "Resolver for the listbox component's props."
      },
      "required": true
    },
    "getOptionProps": {
      "type": {
        "name": "(renderedOption: RenderedOption<T>) => React.HTMLAttributes<HTMLLIElement>",
        "description": "Resolver for the rendered option element's props."
      },
      "required": true
    },
    "id": {
      "type": {
        "name": "string",
        "description": "Id for the Autocomplete."
      },
      "required": true
    },
    "inputValue": {
      "type": {
        "name": "string",
        "description": "The input value."
      },
      "required": true
    },
    "value": {
      "type": {
        "name": "AutocompleteValue<T, Multiple, DisableClearable, FreeSolo>",
        "description": "The value of the autocomplete."
      },
      "required": true
    },
    "dirty": {
      "type": {
        "name": "boolean",
        "description": "If `true`, the component has valid values selected."
      },
      "default": "false",
      "required": true
    },
    "popupOpen": {
      "type": {
        "name": "boolean",
        "description": "If `true`, the popup is open on the component."
      },
      "default": "false",
      "required": true
    },
    "focused": {
      "type": {
        "name": "boolean",
        "description": "If `true`, the component is focused."
      },
      "default": "false",
      "required": true
    },
    "anchorEl": {
      "type": {
        "name": "null | HTMLElement",
        "description": "An HTML element that is used to set the position of the component."
      },
      "required": true
    },
    "setAnchorEl": {
      "type": {
        "name": "() => void",
        "description": "Setter for the component `anchorEl`."
      },
      "required": true
    },
    "focusedTag": {
      "type": {
        "name": "number",
        "description": "Index of the focused tag for the component."
      },
      "default": "-1",
      "required": true
    },
    "groupedOptions": {
      "type": {
        "name": "T[] | Array<AutocompleteGroupedOption<T>>",
        "description": "The options to render. It's either `T[]` or `AutocompleteGroupedOption<T>[]` if the groupBy prop is provided."
      },
      "required": true
    }
  },
  "name": "useAutocomplete",
  "filename": "/packages/mui-base/src/AutocompleteUnstyled/useAutocomplete.js",
  "demos": "<ul></ul>"
}
