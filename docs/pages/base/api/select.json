{
  "props": {
    "autoFocus": { "type": { "name": "bool" }, "default": "false" },
    "defaultListboxOpen": { "type": { "name": "bool" }, "default": "false" },
    "defaultValue": { "type": { "name": "any" } },
    "disabled": { "type": { "name": "bool" }, "default": "false" },
    "getSerializedValue": { "type": { "name": "func" } },
    "listboxId": { "type": { "name": "string" } },
    "listboxOpen": { "type": { "name": "bool" }, "default": "undefined" },
    "multiple": { "type": { "name": "bool" }, "default": "false" },
    "name": { "type": { "name": "string" } },
    "onChange": { "type": { "name": "func" } },
    "onListboxOpenChange": { "type": { "name": "func" } },
    "optionStringifier": { "type": { "name": "func" }, "default": "defaultOptionStringifier" },
    "renderValue": { "type": { "name": "func" } },
    "slotProps": {
      "type": {
        "name": "shape",
        "description": "{ listbox?: func<br>&#124;&nbsp;object, popper?: func<br>&#124;&nbsp;{ anchorEl?: func<br>&#124;&nbsp;object, children?: element<br>&#124;&nbsp;func<br>&#124;&nbsp;number<br>&#124;&nbsp;{ __@iterator@94: func }<br>&#124;&nbsp;string<br>&#124;&nbsp;bool, container?: element<br>&#124;&nbsp;func, direction?: 'ltr'<br>&#124;&nbsp;'rtl', disablePortal?: bool, keepMounted?: bool, modifiers?: Array&lt;{ data?: object, effect?: func, enabled?: bool, fn?: func, name?: any, options?: object, phase?: 'afterMain'<br>&#124;&nbsp;'afterRead'<br>&#124;&nbsp;'afterWrite'<br>&#124;&nbsp;'beforeMain'<br>&#124;&nbsp;'beforeRead'<br>&#124;&nbsp;'beforeWrite'<br>&#124;&nbsp;'main'<br>&#124;&nbsp;'read'<br>&#124;&nbsp;'write', requires?: Array&lt;string&gt;, requiresIfExists?: Array&lt;string&gt; }&gt;, open?: bool, placement?: 'auto-end'<br>&#124;&nbsp;'auto-start'<br>&#124;&nbsp;'auto'<br>&#124;&nbsp;'bottom-end'<br>&#124;&nbsp;'bottom-start'<br>&#124;&nbsp;'bottom'<br>&#124;&nbsp;'left-end'<br>&#124;&nbsp;'left-start'<br>&#124;&nbsp;'left'<br>&#124;&nbsp;'right-end'<br>&#124;&nbsp;'right-start'<br>&#124;&nbsp;'right'<br>&#124;&nbsp;'top-end'<br>&#124;&nbsp;'top-start'<br>&#124;&nbsp;'top', popperOptions?: { modifiers?: array, onFirstUpdate?: func, placement?: 'auto-end'<br>&#124;&nbsp;'auto-start'<br>&#124;&nbsp;'auto'<br>&#124;&nbsp;'bottom-end'<br>&#124;&nbsp;'bottom-start'<br>&#124;&nbsp;'bottom'<br>&#124;&nbsp;'left-end'<br>&#124;&nbsp;'left-start'<br>&#124;&nbsp;'left'<br>&#124;&nbsp;'right-end'<br>&#124;&nbsp;'right-start'<br>&#124;&nbsp;'right'<br>&#124;&nbsp;'top-end'<br>&#124;&nbsp;'top-start'<br>&#124;&nbsp;'top', strategy?: 'absolute'<br>&#124;&nbsp;'fixed' }, popperRef?: func<br>&#124;&nbsp;{ current?: object }, slotProps?: { root?: func<br>&#124;&nbsp;object }, slots?: { root?: elementType }, transition?: bool }, root?: func<br>&#124;&nbsp;object }"
      },
      "default": "{}"
    },
    "slots": {
      "type": {
        "name": "shape",
        "description": "{ listbox?: elementType, popper?: elementType, root?: elementType }"
      },
      "default": "{}"
    },
    "value": { "type": { "name": "any" } }
  },
  "name": "Select",
  "styles": { "classes": [], "globalClasses": {}, "name": null },
  "slots": [
    {
      "name": "root",
      "description": "The component that renders the root.",
      "default": "'button'",
      "class": ".MuiSelect-root"
    },
    {
      "name": "listbox",
      "description": "The component that renders the listbox.",
      "default": "'ul'",
      "class": ".MuiSelect-listbox"
    },
    {
      "name": "popper",
      "description": "The component that renders the popper.",
      "default": "Popper",
      "class": ".MuiSelect-popper"
    }
  ],
  "classes": {
    "classes": ["active", "disabled", "expanded", "focusVisible"],
    "globalClasses": {
      "active": "Mui-active",
      "expanded": "Mui-expanded",
      "disabled": "Mui-disabled",
      "focusVisible": "Mui-focusVisible"
    }
  },
  "spread": true,
  "muiName": "MuiSelect",
  "forwardsRefTo": "HTMLButtonElement",
  "filename": "/packages/mui-base/src/Select/Select.tsx",
  "inheritance": null,
  "demos": "<ul><li><a href=\"/base/react-select/\">Select</a></li></ul>",
  "cssComponent": false
}
